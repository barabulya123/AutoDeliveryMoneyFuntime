from __future__ import annotations
from typing import TYPE_CHECKING, Dict, List, Tuple
if TYPE_CHECKING:
    from cardinal import Cardinal

import os
import json
import logging
import traceback
import threading
import subprocess
import time
from datetime import datetime, timedelta
import html
import re

from FunPayAPI.updater.events import NewMessageEvent, NewOrderEvent
from FunPayAPI import enums
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ
NAME = "MinecraftCurrency"
VERSION = "1.2"
DESCRIPTION = "–ü–ª–∞–≥–∏–Ω –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ –≤–∞–ª—é—Ç—ã –Ω–∞ Funtime"
CREDITS = "@ilpajj"
UUID = "12e01de2-de3a-447a-a49e-c0f7c143cf98"
SETTINGS_PAGE = False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
RUNNING = False
IS_STARTED = False

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–∞—Ö
orders_info = {}  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è
pending_orders = {}  # –û–∂–∏–¥–∞—é—â–∏–µ –≤—ã–¥–∞—á–∏ –≤–∞–ª—é—Ç—ã

# Telegram –±–æ—Ç –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
bot = None
config = {}
cardinal_instance = None

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
user_states = {}  # –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
LOG_DIR = os.path.join("storage", "logs")
os.makedirs(LOG_DIR, exist_ok=True)
LOG_PATH = os.path.join(LOG_DIR, "minecraft_currency.log")

CONFIG_PATH = os.path.join("storage", "cache", "minecraft_currency_config.json")
ORDERS_PATH = os.path.join("storage", "cache", "minecraft_currency_orders.json")
PENDING_ORDERS_PATH = os.path.join("storage", "cache", "pending_minecraft_orders.json")

os.makedirs(os.path.dirname(CONFIG_PATH), exist_ok=True)
os.makedirs(os.path.dirname(ORDERS_PATH), exist_ok=True)
os.makedirs(os.path.dirname(PENDING_ORDERS_PATH), exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger("FPC.minecraft_currency")
logger.setLevel(logging.INFO)

if not logger.handlers:
    file_handler = logging.FileHandler(LOG_PATH, encoding='utf-8')
    file_handler.setLevel(logging.INFO)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

LOGGER_PREFIX = "[MINECRAFT CURRENCY]"

def load_config() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞"""
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        if os.path.exists(CONFIG_PATH):
            with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
                config = json.load(f)
            logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")
            return config
        else:
            logger.info("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
            config = create_default_config()
            save_config(config)
            return config
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return create_default_config()

def create_default_config() -> Dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return {
        "auto_start": True,
        "notification_chat_id": None,
        "coins_per_unit": 1000000,
        "process_all_orders": True,
    "allowed_lot_ids": [],
    "check_lot_ids": False,
    # –°–ø–∏—Å–æ–∫ –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é FunPay –∏–º–µ–µ—Ç id 0)
    "trusted_payment_senders": [0],
        "messages": {
            "after_payment": "üí∞ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n\n"
                           "‚úÖ–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –∏ –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ –≤–∞–ª—é—Ç—É Minecraft.\n"
                           "‚ûó–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–∏–∫–Ω–µ–π–º –≤ Minecraft –¥–ª—è –≤—ã–¥–∞—á–∏ –≤–∞–ª—é—Ç—ã.\n\n"
                           "–ü—Ä–∏–º–µ—Ä: Steve",
            "processing": "‚è≥ –í–∞—à –∑–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n"
                         "–°—É–º–º–∞: {amount:,} –º–æ–Ω–µ—Ç\n"
                         "–ù–∏–∫–Ω–µ–π–º: {username}\n\n"
                         "ü§ñ –ë–æ—Ç —Å–µ–π—á–∞—Å –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∏ –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –≤–∞–º –≤–∞–ª—é—Ç—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n"
                         "–û–∂–∏–¥–∞–π—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã...",
            "completed": "‚úÖ –í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞!\n"
                        "–ó–∞–∫–∞–∑ #{order_id} –≤—ã–ø–æ–ª–Ω–µ–Ω.\n"
                        "–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ {amount:,} –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {username}\n\n"
                        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéÆ"
        },
        "require_username": True,
        "admin_notifications": True,
        "auto_give_currency": True,
        "minecraft_bot": {
            "enabled": True,
            "bot_username": "Bot",
            "server": "funtime.su",
            "password": "password",
            "anarchy": "an210",
            "test_username": "Test_user"
        }
    }

def save_config(cfg: Dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    with open(CONFIG_PATH, 'w', encoding='utf-8') as f:
        json.dump(cfg, f, ensure_ascii=False, indent=4)
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")

def load_orders_info() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö"""
    file_lock = threading.Lock()
    
    try:
        with file_lock:
            if os.path.exists(ORDERS_PATH):
                try:
                    with open(ORDERS_PATH, 'r', encoding='utf-8') as f:
                        file_content = f.read()
                        if not file_content.strip():
                            return {}
                        else:
                            return json.loads(file_content)
                except (json.JSONDecodeError, Exception) as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {ORDERS_PATH}: {e}")
                    return {}
            else:
                return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø–µ –∫ —Ñ–∞–π–ª—É {ORDERS_PATH}: {e}")
        return {}

def save_orders_info(orders: Dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö"""
    file_lock = threading.Lock()
    
    try:
        with file_lock:
            with open(ORDERS_PATH, 'w', encoding='utf-8') as f:
                json.dump(orders, f, ensure_ascii=False, indent=4)
            logger.info("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö: {e}")

def load_pending_orders() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤"""
    if not os.path.exists(PENDING_ORDERS_PATH):
        return {}
    try:
        with open(PENDING_ORDERS_PATH, 'r', encoding='utf-8') as f:
            return json.load(f)
    except json.JSONDecodeError:
        return {}

def save_pending_orders(orders: Dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤"""
    with open(PENDING_ORDERS_PATH, 'w', encoding='utf-8') as f:
        json.dump(orders, f, ensure_ascii=False, indent=4)

def get_lot_info_by_order(c: Cardinal, order_event) -> Tuple[int, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–µ –∏–∑ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–µ—Ç –∑–∞ –µ–¥–∏–Ω–∏—Ü—É
        cfg = load_config()
        coins_per_unit = cfg.get('coins_per_unit', 1000000)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –º–∏–ª–ª–∏–æ–Ω
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫–∞–∑–∞
        if hasattr(order_event, 'order') and order_event.order:
            order = order_event.order
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞
            quantity = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –µ–¥–∏–Ω–∏—Ü–∞
            
            # –°–ø–æ—Å–æ–± 1: –ò–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ amount (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞)
            if hasattr(order, 'amount') and order.amount:
                quantity = int(order.amount)
                logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –∏–∑ order.amount: {quantity}")
            
            # –°–ø–æ—Å–æ–± 2: –ò–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ quantity
            elif hasattr(order, 'quantity') and order.quantity:
                quantity = int(order.quantity)
                logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –∏–∑ order.quantity: {quantity}")
            
            # –°–ø–æ—Å–æ–± 3: –ò–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ count
            elif hasattr(order, 'count') and order.count:
                quantity = int(order.count)
                logger.info(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –∏–∑ order.count: {quantity}")
            
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü —Ç–æ–≤–∞—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {quantity}")
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç
            total_coins = quantity * coins_per_unit
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            description = "–¢–æ–≤–∞—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Minecraft –≤–∞–ª—é—Ç—É"
            if hasattr(order, 'description') and order.description:
                description = f"{order.description} ‚Üí Minecraft –≤–∞–ª—é—Ç–∞"
            elif hasattr(order, 'short_description') and order.short_description:
                description = f"{order.short_description} ‚Üí Minecraft –≤–∞–ª—é—Ç–∞"
            elif hasattr(order, 'lot_title') and order.lot_title:
                description = f"{order.lot_title} ‚Üí Minecraft –≤–∞–ª—é—Ç–∞"
            
            result_description = f"{description} ({total_coins:,} –º–æ–Ω–µ—Ç –∑–∞ {quantity} –µ–¥.)"
            
            logger.info(f"–†–∞—Å—Å—á–∏—Ç–∞–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞–ª—é—Ç—ã: {quantity} –µ–¥. √ó {coins_per_unit:,} = {total_coins:,} –º–æ–Ω–µ—Ç")
            return total_coins, result_description
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ—Ç–µ: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    cfg = load_config()
    default_coins = cfg.get('coins_per_unit', 1000000)
    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–æ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
    return default_coins, f"–¢–æ–≤–∞—Ä –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Minecraft –≤–∞–ª—é—Ç—É ({default_coins:,} –º–æ–Ω–µ—Ç –∑–∞ 1 –µ–¥.)"

def is_allowed_lot(c: Cardinal, order_event) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ª–æ—Ç–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã."""
    logger.info(f"{LOGGER_PREFIX} –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –ª–æ—Ç–æ–≤ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã")
    return True

def test_minecraft_bot_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Minecraft –±–æ—Ç–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±–æ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        bot_script_path = os.path.join(os.path.dirname(__file__), "minecraft_bot", "simple_bot.js")
        
        if not os.path.exists(bot_script_path):
            logger.error(f"{LOGGER_PREFIX} –§–∞–π–ª —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {bot_script_path}")
            return False
            
        # –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        result = subprocess.run([
            "node", bot_script_path, "test"
        ], capture_output=True, text=True, timeout=30, encoding='utf-8', errors='replace')
        
        if result.returncode == 0:
            try:
                # –ò—â–µ–º JSON –≤ –≤—ã–≤–æ–¥–µ
                stdout_lines = result.stdout.strip().split('\n')
                for line in reversed(stdout_lines):
                    if line.strip().startswith('{') and 'success' in line:
                        status_data = json.loads(line.strip())
                        logger.info(f"{LOGGER_PREFIX} –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {status_data}")
                        return status_data.get('success', False) and status_data.get('isConnected', False)
                        
                # –ï—Å–ª–∏ JSON –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É
                if 'success' in result.stdout.lower():
                    return True
                return False
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                if 'success' in result.stdout.lower():
                    return True
                return False
        else:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        logger.warning(f"{LOGGER_PREFIX} –¢–∞–π–º–∞—É—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞")
        return False
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞: {e}")
        return False

def give_minecraft_currency(username, amount):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π Minecraft –±–æ—Ç–∞"""
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–µ–π –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    logger.info(f"{LOGGER_PREFIX} –ù–∞—á–∏–Ω–∞–µ–º –≤—ã–¥–∞—á—É {amount:,} –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {username}")
    bot_script_path = os.path.join(os.path.dirname(__file__), "minecraft_bot", "simple_bot.js")

    if not os.path.exists(bot_script_path):
        logger.error(f"{LOGGER_PREFIX} –§–∞–π–ª —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {bot_script_path}")
        return {'success': False, 'error': 'bot_script_not_found', 'message': '–§–∞–π–ª Minecraft –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω'}

    cfg = load_config()
    mb = cfg.get('minecraft_bot', {})
    bot_username = mb.get('bot_username', '')
    bot_password = mb.get('password', '')
    server = mb.get('server', 'funtime.su')
    port = mb.get('port', 25565)
    anarchy = mb.get('anarchy', 'an210')

    # –ü–µ—Ä–≤—ã–π (–ø–æ–ª–Ω—ã–π) –≤—ã–∑–æ–≤: –ø–µ—Ä–µ–¥–∞—ë–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    command_args = ["node", bot_script_path, username, str(amount), bot_username, bot_password, server, str(port), anarchy]
    # Show full args (password unmasked) as requested
    logger.info(f"{LOGGER_PREFIX} –ó–∞–ø—É—Å–∫ Node-—Å–∫—Ä–∏–ø—Ç–∞ —Å args: {command_args}")

    try:
        result = subprocess.run(command_args, capture_output=True, text=True, timeout=90, encoding='utf-8', errors='replace')
    except subprocess.TimeoutExpired:
        logger.error(f"{LOGGER_PREFIX} ‚ùå –¢–∞–π–º–∞—É—Ç –∑–∞–ø—É—Å–∫–∞ Node-—Å–∫—Ä–∏–ø—Ç–∞ (90 —Å–µ–∫)")
        return {'success': False, 'error': 'timeout', 'message': '–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Node-—Å–∫—Ä–∏–ø—Ç–∞'}
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Node-—Å–∫—Ä–∏–ø—Ç–∞: {e}")
        result = None

    # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∫–æ–¥ != 0, –¥–µ–ª–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π (–ø—Ä–æ—Å—Ç–æ–π) –≤—ã–∑–æ–≤
    if not result or (hasattr(result, 'returncode') and result.returncode != 0):
        logger.info(f"{LOGGER_PREFIX} –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –Ω–µ—É—Å–ø–µ—à–µ–Ω, –ø—ã—Ç–∞–µ–º fallback (node simple_bot.js <player> <amount>)")
        fallback_args = ["node", bot_script_path, username, str(amount)]
        try:
            fallback_result = subprocess.run(fallback_args, capture_output=True, text=True, timeout=90, encoding='utf-8', errors='replace')
            result = fallback_result
        except subprocess.TimeoutExpired:
            logger.error(f"{LOGGER_PREFIX} ‚ùå –¢–∞–π–º–∞—É—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ Node-—Å–∫—Ä–∏–ø—Ç–∞ (90 —Å–µ–∫)")
            return {'success': False, 'error': 'timeout', 'message': '–¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è Node-—Å–∫—Ä–∏–ø—Ç–∞ (fallback)'}
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ Node-—Å–∫—Ä–∏–ø—Ç–∞: {e}")
            return {'success': False, 'error': 'bot_execution_failed', 'message': str(e)}

    # –õ–æ–≥ –≤—ã–≤–æ–¥–∞
    try:
        logger.info(f"{LOGGER_PREFIX} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–∞ (–∫–æ–¥: {result.returncode})")
        logger.info(f"{LOGGER_PREFIX} Stdout: {result.stdout}")
        if result.stderr:
            logger.info(f"{LOGGER_PREFIX} Stderr: {result.stderr}")
    except Exception:
        logger.warning(f"{LOGGER_PREFIX} –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–∞")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if result and getattr(result, 'returncode', 1) == 0:
        stdout_content = result.stdout or ""
        try:
            stdout_lines = stdout_content.strip().split('\n') if stdout_content else []
            json_line = None
            for line in reversed(stdout_lines):
                if line.strip().startswith('{') and ('success' in line or 'error' in line):
                    json_line = line.strip()
                    break

            if json_line:
                result_data = json.loads(json_line)
                logger.info(f"{LOGGER_PREFIX} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤–æ–¥–∞: {result_data}")
                if result_data.get('success'):
                    return {'success': True, 'message': result_data.get('message', '–£—Å–ø–µ—à–Ω–æ'), 'player': username, 'amount': amount}
                else:
                    return {'success': False, 'error': result_data.get('error', 'unknown'), 'message': result_data.get('message', '–û—à–∏–±–∫–∞')}
            else:
                return {'success': True, 'message': '–£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ (–±–µ–∑ JSON)', 'player': username, 'amount': amount}
        except json.JSONDecodeError:
            return {'success': True, 'message': '–£—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–æ (–ø–∞—Ä—Å–∏–Ω–≥ JSON –Ω–µ —É–¥–∞–ª—Å—è)', 'player': username, 'amount': amount}
    else:
        stderr_text = getattr(result, 'stderr', None) if result else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
        logger.error(f"{LOGGER_PREFIX} ‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–∞: {stderr_text}")
        return {'success': False, 'error': 'bot_execution_failed', 'message': f'–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–∞: {stderr_text[:200] if stderr_text else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}'}

def auto_complete_order_with_currency(order_id, admin_chat_id=None):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –≤—ã–¥–∞—á–µ–π –≤–∞–ª—é—Ç—ã"""
    global pending_orders, orders_info
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö
    order_data = pending_orders.get(order_id)
    
    if not order_data:
        logger.error(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        return False
    
    username = order_data.get('minecraft_username')
    amount = order_data.get('amount', 0)
    
    if not username:
        logger.error(f"{LOGGER_PREFIX} –ù–µ —É–∫–∞–∑–∞–Ω –Ω–∏–∫–Ω–µ–π–º –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
        return False
    
    logger.info(f"{LOGGER_PREFIX} –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ #{order_id} –¥–ª—è {username} –Ω–∞ —Å—É–º–º—É {amount:,}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É
    currency_result = give_minecraft_currency(username, amount)
    
    if currency_result['success']:
        # –í–∞–ª—é—Ç–∞ –≤—ã–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑
        order_data['status'] = 'completed'
        order_data['completed_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        order_data['completed_by'] = 'auto_bot'
        order_data['auto_completed'] = True
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
        del pending_orders[order_id]
        save_pending_orders(pending_orders)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        cfg = load_config()
        completion_msg = cfg['messages']['completed'].format(
            order_id=order_id,
            amount=amount,
            username=username
        )
        completion_msg += f"\n\nü§ñ –î–µ–Ω—å–≥–∏ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        if order_id in orders_info:
            target_chat_id = orders_info[order_id]['chat_id']
            try:
                cardinal_instance.send_message(target_chat_id, completion_msg)
                logger.info(f"{LOGGER_PREFIX} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –≤ —á–∞—Ç {target_chat_id}")
            except Exception as e:
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {e}")
        
        logger.info(f"{LOGGER_PREFIX} ‚úÖ –ó–∞–∫–∞–∑ #{order_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å")
        return True
        
    else:
        # –í–∞–ª—é—Ç–∞ –Ω–µ –≤—ã–¥–∞–Ω–∞, –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        logger.error(f"{LOGGER_PREFIX} ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {currency_result['message']}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± –æ—à–∏–±–∫–µ
        if admin_chat_id and bot:
            error_msg = f"‚ùå –û–®–ò–ë–ö–ê –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –í–´–î–ê–ß–ò\n\n" \
                      f"–ó–∞–∫–∞–∑: #{order_id}\n" \
                      f"–ò–≥—Ä–æ–∫: {username}\n" \
                      f"–°—É–º–º–∞: {amount:,} –º–æ–Ω–µ—Ç\n" \
                      f"–û—à–∏–±–∫–∞: {currency_result['message']}\n\n" \
                      f"–¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –≤—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã!\n" \
                      f"‚úÖ /complete_{order_id} - –í—ã–¥–∞–ª –≤—Ä—É—á–Ω—É—é\n" \
                      f"‚ùå /cancel_{order_id} - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"
            
            try:
                bot.send_message(admin_chat_id, error_msg)
                logger.info(f"{LOGGER_PREFIX} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            except Exception as e:
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
        
        return False

def minecraft_currency_handler(c: Cardinal, e, *args):
    """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π"""
    global RUNNING, orders_info, pending_orders

    try:
        if not RUNNING:
            return

        my_id = c.account.id
        bot_ = c.telegram.bot

        if isinstance(e, NewMessageEvent):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π
            if e.message.author_id == my_id:
                logger.info(f"{LOGGER_PREFIX} –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return

            msg_text = e.message.text.strip() if e.message.text else ""
            msg_author_id = e.message.author_id
            msg_chat_id = e.message.chat_id
            
            logger.info(f"{LOGGER_PREFIX} –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg_author_id} –≤ —á–∞—Ç–µ {msg_chat_id}: '{msg_text}'")

            # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —á–∞—Ç–µ (–∏–Ω–æ–≥–¥–∞ FunPay —à–ª—ë—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ NewOrderEvent)
            try:
                pay_match = re.search(r"–æ–ø–ª–∞—Ç–∏–ª(?:.|) –∑–∞–∫–∞–∑ #([A-Z0-9]+)", msg_text, re.IGNORECASE)
                if pay_match:
                    new_order_id = pay_match.group(1)
                    cfg_check = load_config()
                    trusted_senders = cfg_check.get('trusted_payment_senders', [0])
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ —Ç–æ–ª—å–∫–æ –æ—Ç –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π
                    if msg_author_id not in trusted_senders:
                        logger.warning(f"{LOGGER_PREFIX} –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ #{new_order_id} –æ—Ç –Ω–µ–¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è {msg_author_id}")
                    else:
                        logger.info(f"{LOGGER_PREFIX} –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ –∑–∞–∫–∞–∑–∞ #{new_order_id} –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —á–∞—Ç–∞ –æ—Ç –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è")
                    # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                    if new_order_id in pending_orders:
                        logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{new_order_id} —É–∂–µ –µ—Å—Ç—å –≤ pending_orders, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
                    else:
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                            od_full = c.account.get_order(new_order_id)
                            buyer_chat_id = od_full.chat_id
                            buyer_id = od_full.buyer_id
                            buyer_username = getattr(od_full, 'buyer_username', None)

                            orders_info[new_order_id] = {
                                'buyer_id': buyer_id,
                                'chat_id': buyer_chat_id,
                                'buyer_username': buyer_username,
                                'order_id': new_order_id
                            }
                            save_orders_info(orders_info)

                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞—Å—á—ë—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞–ª—é—Ç—ã
                            dummy = type('D', (), {})()
                            dummy.order = od_full
                            amount, lot_title = get_lot_info_by_order(c, dummy)

                            pending_orders[new_order_id] = {
                                'order_id': new_order_id,
                                'amount': amount,
                                'lot_title': lot_title,
                                'price': getattr(od_full, 'price', 0),
                                'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                                'status': 'waiting_username',
                                'waiting_for_username': True,
                                'minecraft_username': None
                            }
                            save_pending_orders(pending_orders)
                            logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{new_order_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏–µ (–ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é –≤ —á–∞—Ç–µ)")

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º
                            cfg = load_config()
                            if buyer_chat_id:
                                try:
                                    c.send_message(buyer_chat_id, cfg['messages']['after_payment'])
                                    logger.info(f"{LOGGER_PREFIX} –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –≤ —á–∞—Ç {buyer_chat_id} (–ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é)")
                                except Exception as sm_err:
                                    logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é (–ø–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—é): {sm_err}")
                        except Exception as ex_get:
                            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ {new_order_id} –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {ex_get}")
            except Exception as notify_ex:
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ: {notify_ex}")

            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∏–∫–∞
            for order_id, order_data in pending_orders.items():
                order_info = orders_info.get(order_id)
                if order_info and order_info.get("buyer_id") == msg_author_id and order_data.get('waiting_for_confirmation', False):
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    resp = msg_text.strip()
                    target_chat_id = order_info.get('chat_id')
                    if resp in ['+', '–ø–ª—é—Å', '+1', 'yes', '–¥–∞']:
                        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ ‚Äî —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –µ—Å—Ç—å proposed_username
                        proposed = order_data.get('proposed_username')
                        if not proposed:
                            # –ù–µ—Ç—É –ø—Ä–µ–¥–ª–æ–∂—ë–Ω–Ω–æ–≥–æ –Ω–∏–∫–∞ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑
                            order_data['waiting_for_confirmation'] = False
                            order_data['waiting_for_username'] = True
                            save_pending_orders(pending_orders)
                            try:
                                c.send_message(target_chat_id, "‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–µ–¥–ª–æ–∂—ë–Ω–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∏–∫–Ω–µ–π–º –µ—â—ë —Ä–∞–∑:")
                            except Exception:
                                pass
                            logger.warning(f"{LOGGER_PREFIX} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø—ã—Ç–∞–ª—Å—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–∏–∫, –Ω–æ proposed_username –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
                            return

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–π –Ω–∏–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
                        order_data['minecraft_username'] = proposed
                        order_data['waiting_for_confirmation'] = False
                        order_data['status'] = 'ready_for_admin'
                        if 'proposed_username' in order_data:
                            del order_data['proposed_username']
                        save_pending_orders(pending_orders)

                        def give_thread():
                            try:
                                logger.info(f"{LOGGER_PREFIX} –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –Ω–∏–∫ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}: {proposed}")
                                auto_complete_order_with_currency(order_id, target_chat_id)
                            except Exception as ex:
                                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–µ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {ex}")

                        threading.Thread(target=give_thread, daemon=True).start()
                        try:
                            c.send_message(target_chat_id, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ. –í–∞–ª—é—Ç–∞ –±—É–¥–µ—Ç –≤—ã–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
                        except Exception:
                            pass
                        return

                    elif resp in ['-', '–º–∏–Ω—É—Å', 'no', '–Ω–µ—Ç']:
                        # –û—Ç–∫–∞–∑ ‚Äî –ø–æ–ø—Ä–æ—Å–∏—Ç—å –Ω–∏–∫ –µ—â—ë —Ä–∞–∑
                        order_data['waiting_for_confirmation'] = False
                        order_data['waiting_for_username'] = True
                        if 'proposed_username' in order_data:
                            del order_data['proposed_username']
                        save_pending_orders(pending_orders)
                        try:
                            c.send_message(target_chat_id, "üì•–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º.")
                        except Exception:
                            pass
                        return
                    else:
                        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
                        try:
                            c.send_message(target_chat_id, "üì©–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–±–æ—Ä [+/-]")
                        except Exception:
                            pass
                        return

            # –ò—â–µ–º –∑–∞–∫–∞–∑ –ø–æ author_id
            found_order = None
            found_order_id = None
            
            # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ pending_orders –∑–∞–∫–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –Ω–∏–∫–Ω–µ–π–º –æ—Ç —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for order_id, order_data in pending_orders.items():
                if order_data.get('waiting_for_username', False):
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ –≤ orders_info
                    order_info = orders_info.get(order_id)
                    if order_info and order_info.get("buyer_id") == msg_author_id:
                        found_order = order_data
                        found_order_id = order_id
                        logger.info(f"{LOGGER_PREFIX} –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg_author_id}")
                        break
            
            if found_order:
                logger.info(f"{LOGGER_PREFIX} –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∏–∫–Ω–µ–π–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: '{msg_text}'")
                
                # –ü–æ–ª—É—á–∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–π –∏ –ø—Ä–æ—Å–∏–º –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                username = msg_text
                found_order['proposed_username'] = username
                found_order['waiting_for_username'] = False
                found_order['waiting_for_confirmation'] = True
                found_order['status'] = 'awaiting_confirmation'

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                save_pending_orders(pending_orders)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
                cfg = load_config()
                target_chat_id = orders_info[found_order_id]['chat_id']
                try:
                    c.send_message(target_chat_id, f"‚ùì–í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ –≤—ã–¥–∞—á–µ –≤–∞–ª—é—Ç—ã –Ω–∞ `{username}`? [+/-]")
                    logger.info(f"{LOGGER_PREFIX} –ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∏–∫–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç {target_chat_id}")
                except Exception as send_error:
                    logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {send_error}")

                return
                
                logger.info(f"{LOGGER_PREFIX} –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞: {auto_give_enabled}, –ë–æ—Ç: {bot_enabled}")
                
                if auto_give_enabled and bot_enabled:
                    logger.info(f"{LOGGER_PREFIX} –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –≤–∫–ª—é—á–µ–Ω–∞, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
                    
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    def auto_complete_thread():
                        time.sleep(2)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                        result = auto_complete_order_with_currency(found_order['order_id'], cfg.get('notification_chat_id'))
                        logger.info(f"{LOGGER_PREFIX} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #{found_order['order_id']}: {result}")

                    threading.Thread(target=auto_complete_thread, daemon=True).start()
                else:
                    # –ï—Å–ª–∏ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ - —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    if cfg.get('admin_notifications', True) and cfg.get('notification_chat_id'):
                        admin_msg = f"üÜï –ù–û–í–´–ô –ó–ê–ö–ê–ó –ù–ê –í–´–î–ê–ß–£ –í–ê–õ–Æ–¢–´\n\n" \
                                  f"üí∞ –ó–∞–∫–∞–∑: #{found_order['order_id']}\n" \
                                  f"üë§ –ù–∏–∫–Ω–µ–π–º: {username}\n" \
                                  f"üíé –°—É–º–º–∞: {found_order['amount']:,} –º–æ–Ω–µ—Ç\n" \
                                  f"üíµ –û–ø–ª–∞—á–µ–Ω–æ: {found_order.get('price', 0)} —Ä—É–±.\n\n" \
                                  f"–î–ª—è –≤—ã–¥–∞—á–∏ –≤–∞–ª—é—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n" \
                                  f"‚úÖ /complete_{found_order['order_id']} - –í—ã–¥–∞–ª –≤–∞–ª—é—Ç—É\n" \
                                  f"ü§ñ /auto_{found_order['order_id']} - –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞\n" \
                                  f"‚ùå /cancel_{found_order['order_id']} - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑"
                        
                        try:
                            bot_.send_message(cfg['notification_chat_id'], admin_msg)
                            logger.info(f"{LOGGER_PREFIX} –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                        except Exception as admin_error:
                            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {admin_error}")
                
                logger.info(f"{LOGGER_PREFIX} –ü–æ–ª—É—á–µ–Ω –Ω–∏–∫–Ω–µ–π–º {username} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{found_order['order_id']}")
            else:
                logger.info(f"{LOGGER_PREFIX} –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg_author_id}")
                # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"{LOGGER_PREFIX} –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã: {list(pending_orders.keys())}")
                logger.info(f"{LOGGER_PREFIX} –î–æ—Å—Ç—É–ø–Ω—ã–µ orders_info: {list(orders_info.keys())}")
                
                # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞
                for order_id, order_data in pending_orders.items():
                    order_info = orders_info.get(order_id, {})
                    logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ {order_id}: waiting={order_data.get('waiting_for_username', False)}, buyer_id={order_info.get('buyer_id')}")

        elif isinstance(e, NewOrderEvent):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            logger.info(f"{LOGGER_PREFIX} –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑, –ø—Ä–æ–≤–µ—Ä—è–µ–º...")
            
            try:
                if e.order.buyer_id == my_id:
                    logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return

                order_id = e.order.id
                order_desc = e.order.description
                order_amount = e.order.amount
                order_price = e.order.price
                
                logger.info(f"{LOGGER_PREFIX} –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}: {order_desc}, x{order_amount}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–∑—Ä–µ—à–µ–Ω –ª–∏ –ª–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                if not is_allowed_lot(c, e):
                    logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–æ–ø—É—â–µ–Ω - –ª–æ—Ç –Ω–µ –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö")
                    return
                
                logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É ID –ª–æ—Ç–∞ - –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É")
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
                try:
                    od_full = c.account.get_order(order_id)
                    buyer_chat_id = od_full.chat_id
                    buyer_id = od_full.buyer_id
                    buyer_username = od_full.buyer_username
                    
                    logger.info(f"{LOGGER_PREFIX} –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: buyer_id={buyer_id}, chat_id={buyer_chat_id}, username={buyer_username}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —Å–≤—è–∑–∏ —Å —á–∞—Ç–æ–º
                    orders_info[order_id] = {
                        "buyer_id": buyer_id,
                        "chat_id": buyer_chat_id,
                        "buyer_username": buyer_username,
                        "order_id": order_id
                    }
                    save_orders_info(orders_info)
                    
                except Exception as full_order_error:
                    logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ: {full_order_error}")
                    buyer_chat_id = e.order.chat_id if hasattr(e.order, 'chat_id') else None
                    buyer_id = e.order.buyer_id
                    
                    orders_info[order_id] = {
                        "buyer_id": buyer_id,
                        "chat_id": buyer_chat_id,
                        "order_id": order_id
                    }
                    save_orders_info(orders_info)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–∞–ª—é—Ç—ã
                amount, lot_title = get_lot_info_by_order(c, e)
                logger.info(f"{LOGGER_PREFIX} –û–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–∫–∞–∑–∞: {amount:,} –º–æ–Ω–µ—Ç, '{lot_title}'")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ–∂–∏–¥–∞—é—â–µ–º –∑–∞–∫–∞–∑–µ
                pending_orders[order_id] = {
                    'order_id': order_id,
                    'amount': amount,
                    'lot_title': lot_title,
                    'price': order_price,
                    'date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'status': 'waiting_username',
                    'waiting_for_username': True,
                    'minecraft_username': None
                }

                save_pending_orders(pending_orders)
                logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{order_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏–µ")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é —Å –ø—Ä–æ—Å—å–±–æ–π —É–∫–∞–∑–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º
                cfg = load_config()
                if buyer_chat_id:
                    try:
                        c.send_message(buyer_chat_id, cfg['messages']['after_payment'])
                        logger.info(f"{LOGGER_PREFIX} –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –≤ —á–∞—Ç {buyer_chat_id}")
                    except Exception as msg_error:
                        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {msg_error}")
                
            except Exception as handler_error:
                logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {handler_error}")
                logger.error(f"{LOGGER_PREFIX} –¢—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")

    except Exception as main_error:
        logger.error(f"{LOGGER_PREFIX} –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏–π: {main_error}")
        logger.error(f"{LOGGER_PREFIX} –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ç—Ä–µ–π—Å–±–µ–∫: {traceback.format_exc()}")

def complete_order(message: types.Message, order_id: str):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    global pending_orders, orders_info
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö
    order_data = pending_orders.get(order_id)
    
    if not order_data:
        bot.send_message(message.chat.id, f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö.")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π
    order_data['status'] = 'completed'
    order_data['completed_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    order_data['completed_by'] = message.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
    del pending_orders[order_id]
    save_pending_orders(pending_orders)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    cfg = load_config()
    completion_msg = cfg['messages']['completed'].format(
        order_id=order_id,
        amount=order_data['amount'],
        username=order_data['minecraft_username']
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    if order_id in orders_info:
        target_chat_id = orders_info[order_id]['chat_id']
        try:
            cardinal_instance.send_message(target_chat_id, completion_msg)
            logger.info(f"{LOGGER_PREFIX} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –≤ —á–∞—Ç {target_chat_id}")
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—é: {e}")
    
    # –ö—Ä–∞—Ç–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_msg = f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–π"
    
    bot.send_message(message.chat.id, admin_msg)
    
    logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º - —É–≤–µ–¥–æ–º–ª–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å")

def cancel_order(message: types.Message, order_id: str):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    global pending_orders, orders_info
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑ –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö
    order_data = pending_orders.get(order_id)
    
    if not order_data:
        bot.send_message(message.chat.id, f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö.")
        return
    
    # –û—Ç–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–π
    order_data['status'] = 'cancelled'
    order_data['cancelled_date'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    order_data['cancelled_by'] = message.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–∂–∏–¥–∞—é—â–∏—Ö
    del pending_orders[order_id]
    save_pending_orders(pending_orders)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
    cancel_msg = f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à –∑–∞–∫–∞–∑ #{order_id} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.\n" \
                f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ orders_info –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    if order_id in orders_info:
        target_chat_id = orders_info[order_id]['chat_id']
        try:
            cardinal_instance.send_message(target_chat_id, cancel_msg)
            logger.info(f"{LOGGER_PREFIX} –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {target_chat_id}")
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–º–µ–Ω–µ: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_msg = f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω."
    bot.send_message(message.chat.id, admin_msg)
    
    logger.info(f"{LOGGER_PREFIX} –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

def show_pending_orders(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã"""
    if not pending_orders:
        bot.send_message(message.chat.id, "üìã –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤.")
        return
    
    msg = "üìã **–û–ñ–ò–î–ê–Æ–©–ò–ï –ó–ê–ö–ê–ó–´**\n\n"
    
    for order_id, data in pending_orders.items():
        status_emoji = "‚è≥" if data['status'] == 'waiting_username' else "‚úÖ"
        username = data.get('minecraft_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        
        msg += f"{status_emoji} –ó–∞–∫–∞–∑ #{data['order_id']}\n" \
               f"üí∞ –°—É–º–º–∞: {data['amount']:,} –º–æ–Ω–µ—Ç\n" \
               f"üë§ –ù–∏–∫–Ω–µ–π–º: {username}\n" \
               f"üìÖ –î–∞—Ç–∞: {data['date']}\n" \
               f"üíµ –û–ø–ª–∞—á–µ–Ω–æ: {data.get('price', 0)} —Ä—É–±.\n"
        
        if data['status'] == 'ready_for_admin':
            msg += f"‚úÖ /complete_{data['order_id']} | ü§ñ /auto_{data['order_id']} | ‚ùå /cancel_{data['order_id']}\n"
        
        msg += "\n"
    
    bot.send_message(message.chat.id, msg, parse_mode='Markdown')

def clear_all_orders(message: types.Message):
    """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ (–æ–∂–∏–¥–∞—é—â–∏—Ö –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)"""
    global pending_orders, orders_info
    
    pending_count = len(pending_orders)
    info_count = len(orders_info)
    
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    pending_orders.clear()
    orders_info.clear()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_pending_orders(pending_orders)
    save_orders_info(orders_info)
    
    msg = f"üóëÔ∏è **–û–ß–ò–°–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n\n" \
          f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {pending_count}\n" \
          f"‚Ä¢ –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {info_count}\n" \
          f"‚Ä¢ –í—Å–µ —Ñ–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω—ã\n\n" \
          f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–≤—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏"
    
    bot.send_message(message.chat.id, msg, parse_mode='Markdown')
    logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—á–∏—Å—Ç–∏–ª –≤—Å–µ –∑–∞–∫–∞–∑—ã: pending={pending_count}, info={info_count}")

def minecraft_currency_settings(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–∞"""
    cfg = load_config()
    
    # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    markup = InlineKeyboardMarkup(row_width=1)
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    markup.add(
        InlineKeyboardButton("ü§ñ –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê", callback_data="show_bot_category")
    )
    markup.add(
        InlineKeyboardButton("üí¨ –ù–ê–°–¢–†–û–ô–ö–ò –°–û–û–ë–©–ï–ù–ò–ô", callback_data="show_messages_category")
    )
    markup.add(
        InlineKeyboardButton("üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò", callback_data="show_orders_category")
    )
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏ —É–¥–∞–ª–µ–Ω–æ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ ‚Äî –∫–Ω–æ–ø–∫–∞ —Å–∫—Ä—ã—Ç–∞
    markup.add(
        InlineKeyboardButton("üîß –û–ë–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò", callback_data="show_general_category")
    )
    markup.add(
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="refresh_settings")
    )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    notif_chat = cfg.get('notification_chat_id', '–ù–µ –∑–∞–¥–∞–Ω')
    status_text = "‚úÖ –ó–ê–ü–£–©–ï–ù" if RUNNING else "‚ùå –û–°–¢–ê–ù–û–í–õ–ï–ù"
    auto_give = cfg.get('auto_give_currency', False)
    bot_enabled = cfg.get('minecraft_bot', {}).get('enabled', False)
    bot_username = cfg.get('minecraft_bot', {}).get('bot_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    bot_password = cfg.get('minecraft_bot', {}).get('password', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    test_username = cfg.get('minecraft_bot', {}).get('test_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —è–≤–Ω–æ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
    masked_password = bot_password if bot_password != '–Ω–µ —É–∫–∞–∑–∞–Ω' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
    coins_per_unit = cfg.get('coins_per_unit', 1000000)
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–æ–≤
    orders_file_size = "–Ω/–¥"
    pending_file_size = "–Ω/–¥"
    try:
        if os.path.exists(ORDERS_PATH):
            orders_file_size = f"{os.path.getsize(ORDERS_PATH)} –±–∞–π—Ç"
        if os.path.exists(PENDING_ORDERS_PATH):
            pending_file_size = f"{os.path.getsize(PENDING_ORDERS_PATH)} –±–∞–π—Ç"
    except:
        pass
    
    msg = f"""üéÆ **MINECRAFT CURRENCY PLUGIN v{VERSION}**

üìä **–°–¢–ê–¢–£–°:** {status_text}

ü§ñ **MINECRAFT –ë–û–¢:**
‚Ä¢ –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê' if auto_give else '‚ùå –í–´–ö–õ–Æ–ß–ï–ù–ê'}
‚Ä¢ –ù–∏–∫–Ω–µ–π–º –±–æ—Ç–∞: `{bot_username}`
‚Ä¢ –ü–∞—Ä–æ–ª—å –±–æ—Ç–∞: `{masked_password}`
‚Ä¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω: {'‚úÖ' if bot_enabled else '‚ùå'}
‚Ä¢ –°–µ—Ä–≤–µ—Ä: {cfg.get('minecraft_bot', {}).get('server', 'funtime.su')}
"""
    
    bot.send_message(message.chat.id, msg, parse_mode='Markdown', reply_markup=markup)

def show_full_settings(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞"""
    cfg = load_config()
    
    notif_chat = cfg.get('notification_chat_id', '–ù–µ –∑–∞–¥–∞–Ω')
    auto_start = cfg.get('auto_start', True)
    admin_notifications = cfg.get('admin_notifications', True)
    require_username = cfg.get('require_username', True)
    coins_per_unit = cfg.get('coins_per_unit', 1000000)
    process_all_orders = cfg.get('process_all_orders', True)
    
    status_text = "‚úÖ –ó–ê–ü–£–©–ï–ù" if RUNNING else "‚ùå –û–°–¢–ê–ù–û–í–õ–ï–ù"
    auto_give = cfg.get('auto_give_currency', False)
    bot_enabled = cfg.get('minecraft_bot', {}).get('enabled', False)
    bot_username = cfg.get('minecraft_bot', {}).get('bot_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    bot_password = cfg.get('minecraft_bot', {}).get('password', '–Ω–µ —É–∫–∞–∑–∞–Ω')
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —è–≤–Ω–æ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
    masked_password = bot_password if bot_password != '–Ω–µ —É–∫–∞–∑–∞–Ω' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
    
    msg = f"""üéÆ **–ü–û–õ–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò –ü–õ–ê–ì–ò–ù–ê v{VERSION}**

üìä **–°–¢–ê–¢–£–°:** {status_text}

‚öôÔ∏è **–û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:**
‚Ä¢ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫: {'‚úÖ' if auto_start else '‚ùå'}
‚Ä¢ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –í–°–ï –∑–∞–∫–∞–∑—ã: {'‚úÖ –î–ê' if process_all_orders else '‚ùå –¢–æ–ª—å–∫–æ Minecraft'}
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {'‚úÖ' if admin_notifications else '‚ùå'}
‚Ä¢ –¢—Ä–µ–±–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º: {'‚úÖ' if require_username else '‚ùå'}
‚Ä¢ –ú–æ–Ω–µ—Ç –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É: {coins_per_unit:,}
‚Ä¢ Chat ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: `{notif_chat}`

ü§ñ **MINECRAFT –ë–û–¢:**
‚Ä¢ –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê (–≤—Å–µ –∑–∞–∫–∞–∑—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)' if auto_give else '‚ùå –í–´–ö–õ–Æ–ß–ï–ù–ê (—Ä—É—á–Ω–∞—è –≤—ã–¥–∞—á–∞)'}
‚Ä¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω: {'‚úÖ' if bot_enabled else '‚ùå'}
‚Ä¢ –ù–∏–∫–Ω–µ–π–º –±–æ—Ç–∞: **{bot_username}**
‚Ä¢ –°–µ—Ä–≤–µ—Ä: {cfg.get('minecraft_bot', {}).get('server', 'funtime.su')}

üìù **–û–ü–ò–°–ê–ù–ò–ï:**
{DESCRIPTION}

üí° **–õ–û–ì–ò–ö–ê –†–ê–°–ß–ï–¢–ê:**
1 –µ–¥–∏–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ = {coins_per_unit:,} –º–æ–Ω–µ—Ç
–ï—Å–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–∫—É–ø–∞–µ—Ç 3 —à—Ç, –ø–æ–ª—É—á–∏—Ç {coins_per_unit * 3:,} –º–æ–Ω–µ—Ç

üéØ **–†–ï–ñ–ò–ú –†–ê–ë–û–¢–´:**
{'üü¢ –û–ë–†–ê–ë–ê–¢–´–í–ê–Æ–¢–°–Ø –í–°–ï –ó–ê–ö–ê–ó–´ - –ª—é–±–æ–π —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ Minecraft –≤–∞–ª—é—Ç—É' if process_all_orders else 'üîµ –¢–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã Minecraft –≤–∞–ª—é—Ç—ã'}

{'ü§ñ –ê–í–¢–û–í–´–î–ê–ß–ê: –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∏–∫–Ω–µ–π–º–∞ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–∞–ª—é—Ç—É' if auto_give else 'üë®‚Äçüíº –†–£–ß–ù–ê–Ø –í–´–î–ê–ß–ê: –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞'}

üìã **–î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:**
‚Ä¢ `/mc_start` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–≥–∏–Ω
‚Ä¢ `/mc_stop` - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω
‚Ä¢ `/mc_pending` - –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã
‚Ä¢ `/mc_clear` - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã (–æ–∂–∏–¥–∞—é—â–∏–µ + –¥–∞–Ω–Ω—ã–µ)
‚Ä¢ `/mc_toggle_auto` - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–≤—ã–¥–∞—á—É –≤–∞–ª—é—Ç—ã (–í–ö–õ/–í–´–ö–õ)
‚Ä¢ `/mc_process_all` - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã –±–æ—Ç–æ–º
‚Ä¢ `/mc_test_pay` - –¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤–∞–ª—é—Ç—ã (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
‚Ä¢ `/mc_force_auto` - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–≤—ã–¥–∞—á—É –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ `/mc_settings` - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ `/mc_test_bot` - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Minecraft –±–æ—Ç–∞
‚Ä¢ `/complete_[ID]` - –í—ã–¥–∞–ª –≤–∞–ª—é—Ç—É (–∑–∞–∫–∞–∑ ID)
‚Ä¢ `/auto_[ID]` - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã
‚Ä¢ `/cancel_[ID]` - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ (–∑–∞–∫–∞–∑ ID)

üí° **–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤:** {len(pending_orders)}

üîß **–ó–∞–∫–∞–∑–æ–≤ –≤ –ø–∞–º—è—Ç–∏:** {len(orders_info)}

üìù **–¢–ï–ö–£–©–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø:**

üî∏ **–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã:**
```
{cfg['messages']['after_payment']}
```

üî∏ **–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ:**
```
{cfg['messages']['processing']}
```

üî∏ **–ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:**
```
{cfg['messages']['completed']}
```

üõ†Ô∏è **–ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê:**
1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à chat_id –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ notification_chat_id
2. –£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤–∞—à–µ–≥–æ Minecraft –±–æ—Ç–∞ –≤ bot_username
3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –±–æ—Ç–∞ –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /mc_test_bot
"""
    
    bot.send_message(message.chat.id, msg, parse_mode='Markdown')

def show_bot_category(chat_id, message_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞"""
    try:
        cfg = load_config()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–æ—Ç–∞
        markup = InlineKeyboardMarkup(row_width=2)
        
        markup.add(
            InlineKeyboardButton("üîß –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º", callback_data="change_bot_username"),
            InlineKeyboardButton("üîë –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="change_bot_password")
        )
        markup.add(
            InlineKeyboardButton("üéØ –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º", callback_data="change_test_username")
        )
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–º–µ–Ω—ã IP/—Ö–æ—Å—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
        markup.add(
            InlineKeyboardButton("üåê –ò–∑–º–µ–Ω–∏—Ç—å IP/—Ö–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞", callback_data="change_server_ip")
        )
        markup.add(
            InlineKeyboardButton("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å", callback_data="show_password")
        )
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="back_to_main")
        )
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞
        bot_username = cfg.get('minecraft_bot', {}).get('bot_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        bot_password = cfg.get('minecraft_bot', {}).get('password', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        test_username = cfg.get('minecraft_bot', {}).get('test_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —è–≤–Ω–æ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
        masked_password = bot_password if bot_password != '–Ω–µ —É–∫–∞–∑–∞–Ω' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        bot_enabled = cfg.get('minecraft_bot', {}).get('enabled', False)
        server = cfg.get('minecraft_bot', {}).get('server', 'funtime.su')
        
        msg = f"""ü§ñ **–ù–ê–°–¢–†–û–ô–ö–ò MINECRAFT –ë–û–¢–ê**

üéÆ **–¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:**
‚Ä¢ –ù–∏–∫–Ω–µ–π–º –±–æ—Ç–∞: `{bot_username}`
‚Ä¢ –ü–∞—Ä–æ–ª—å –±–æ—Ç–∞: `{masked_password}`
‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º: `{test_username}`
‚Ä¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω: {'‚úÖ' if bot_enabled else '‚ùå'}
‚Ä¢ –°–µ—Ä–≤–µ—Ä: {server}

üìã **–î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:**
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å

üí° **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
–≠—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É Minecraft –∏ –≤—ã–¥–∞—á–∏ –≤–∞–ª—é—Ç—ã.
–¢–µ—Å—Ç–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/mc_test_pay` - –Ω–∞ –Ω–µ–≥–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ 1000 –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.
"""
        
        if message_id:
            bot.edit_message_text(msg, chat_id, message_id, parse_mode='Markdown', reply_markup=markup)
        else:
            bot.send_message(chat_id, msg, parse_mode='Markdown', reply_markup=markup)
            
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ show_bot_category: {e}")
        error_msg = "‚ùå **–û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ù–ê–°–¢–†–û–ï–ö –ë–û–¢–ê**\n\n" \
                   f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n\n" \
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–≥–∏–Ω."
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="back_to_main"))
        
        if message_id:
            bot.edit_message_text(error_msg, chat_id, message_id, parse_mode='Markdown', reply_markup=markup)
        else:
            bot.send_message(chat_id, error_msg, parse_mode='Markdown', reply_markup=markup)

def show_messages_category(chat_id, message_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        cfg = load_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ–∫—Ü–∏–∏ messages
        if 'messages' not in cfg:
            cfg['messages'] = {
                'after_payment': '–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                'processing': '–¢–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
                'completed': '–¢–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
            }
            save_config(cfg)
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        markup = InlineKeyboardMarkup(row_width=2)
        
        markup.add(
            InlineKeyboardButton("üìù –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã", callback_data="change_after_payment"),
            InlineKeyboardButton("‚è≥ –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ", callback_data="change_processing")
        )
        markup.add(
            InlineKeyboardButton("‚úÖ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è", callback_data="change_completed")
        )
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="back_to_main")
        )
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏–Ω —Ç–µ–∫—Å—Ç–æ–≤
        after_payment_len = len(cfg.get('messages', {}).get('after_payment', ''))
        processing_len = len(cfg.get('messages', {}).get('processing', ''))
        completed_len = len(cfg.get('messages', {}).get('completed', ''))
        
        msg = f"""üí¨ **–ù–ê–°–¢–†–û–ô–ö–ò –°–û–û–ë–©–ï–ù–ò–ô**

üìù **–¢–ï–ö–£–©–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø:**
üîπ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {after_payment_len} —Å–∏–º–≤–æ–ª–æ–≤
üîπ –ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {processing_len} —Å–∏–º–≤–æ–ª–æ–≤  
üîπ –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {completed_len} —Å–∏–º–≤–æ–ª–æ–≤

üìã **–î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:**
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

üí° **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
–≠—Ç–∏ —Ç–µ–∫—Å—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —ç—Ç–∞–ø–∞—Ö –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ `{"{order_id}"}`, `{"{amount}"}`, `{"{username}"}`–≤ —Ç–µ–∫—Å—Ç–∞—Ö.
"""
        
        if message_id:
            bot.edit_message_text(msg, chat_id, message_id, parse_mode='Markdown', reply_markup=markup)
        else:
            bot.send_message(chat_id, msg, parse_mode='Markdown', reply_markup=markup)
            
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ show_messages_category: {e}")
        error_msg = "‚ùå **–û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ù–ê–°–¢–†–û–ï–ö –°–û–û–ë–©–ï–ù–ò–ô**\n\n" \
                   f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n\n" \
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–≥–∏–Ω."
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="back_to_main"))
        
        if message_id:
            bot.edit_message_text(error_msg, chat_id, message_id, parse_mode='Markdown', reply_markup=markup)
        else:
            bot.send_message(chat_id, error_msg, parse_mode='Markdown', reply_markup=markup)

def show_orders_category(chat_id, message_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏"""
    try:
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤
        markup = InlineKeyboardMarkup(row_width=2)
        
        markup.add(
            InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data="clear_order_files"),
            InlineKeyboardButton("üì§ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data="export_order_files")
        )
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="back_to_main")
        )
        
        # –ü–æ–¥—Å—á–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö
        orders_file_size = "–Ω/–¥"
        pending_file_size = "–Ω/–¥"
        config_file_size = "–Ω/–¥"
        
        try:
            if os.path.exists(ORDERS_PATH):
                orders_file_size = f"{os.path.getsize(ORDERS_PATH)} –±–∞–π—Ç"
            if os.path.exists(PENDING_ORDERS_PATH):
                pending_file_size = f"{os.path.getsize(PENDING_ORDERS_PATH)} –±–∞–π—Ç"
            if os.path.exists(CONFIG_PATH):
                config_file_size = f"{os.path.getsize(CONFIG_PATH)} –±–∞–π—Ç"
        except:
            pass
        
        msg = f"""üìã **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò**

üíæ **–°–û–°–¢–û–Ø–ù–ò–ï –§–ê–ô–õ–û–í:**
‚Ä¢ –ó–∞–∫–∞–∑—ã –≤ –ø–∞–º—è—Ç–∏: {len(orders_info)}
‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {len(pending_orders)}
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∑–∞–∫–∞–∑–æ–≤: {orders_file_size}
‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö: {pending_file_size}
‚Ä¢ –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {config_file_size}

üìã **–î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:**
‚Ä¢ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –í—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï:**
–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —É–¥–∞–ª–∏—Ç –í–°–ï –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ!
–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é.
"""
        
        if message_id:
            bot.edit_message_text(msg, chat_id, message_id, parse_mode='Markdown', reply_markup=markup)
        else:
            bot.send_message(chat_id, msg, parse_mode='Markdown', reply_markup=markup)
            
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ show_orders_category: {e}")
        error_msg = "‚ùå **–û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê–ú–ò**\n\n" \
                   f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n\n" \
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–≥–∏–Ω."
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="back_to_main"))
        
        if message_id:
            bot.edit_message_text(error_msg, chat_id, message_id, parse_mode='Markdown', reply_markup=markup)
        else:
            bot.send_message(chat_id, error_msg, parse_mode='Markdown', reply_markup=markup)

def show_lots_category(chat_id, message_id=None):
    # –ó–∞–≥–ª—É—à–∫–∞: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏ —É–¥–∞–ª–µ–Ω–æ
    try:
        msg = "üéØ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ –ø–ª–∞–≥–∏–Ω–∞."
        if message_id:
            bot.edit_message_text(msg, chat_id, message_id, parse_mode='Markdown')
        else:
            bot.send_message(chat_id, msg, parse_mode='Markdown')
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ show_lots_category: {e}")


def show_general_category(chat_id, message_id=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        cfg = load_config()
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –æ–±—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
        markup = InlineKeyboardMarkup(row_width=1)
        
        markup.add(
            InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="show_all_settings")
        )
        markup.add(
            InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="back_to_main")
        )
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–≥–∏–Ω–µ
        status_text = "‚úÖ –ó–ê–ü–£–©–ï–ù" if RUNNING else "‚ùå –û–°–¢–ê–ù–û–í–õ–ï–ù"
        auto_give = cfg.get('auto_give_currency', False)
        coins_per_unit = cfg.get('coins_per_unit', 1000000)
        process_all_orders = cfg.get('process_all_orders', True)
        notif_chat = cfg.get('notification_chat_id', '–ù–µ –∑–∞–¥–∞–Ω')
        
        msg = f"""üîß **–û–ë–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò**

üìä **–°–¢–ê–¢–£–° –ü–õ–ê–ì–ò–ù–ê:** {status_text}

‚öôÔ∏è **–û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´:**
‚Ä¢ –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê' if auto_give else '‚ùå –í–´–ö–õ–Æ–ß–ï–ù–ê'}
‚Ä¢ –ú–æ–Ω–µ—Ç –∑–∞ 1 –µ–¥–∏–Ω–∏—Ü—É: {coins_per_unit:,}
‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤: {'‚úÖ –î–ê' if process_all_orders else '‚ùå –ù–ï–¢'}
‚Ä¢ Chat ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: `{notif_chat}`

üìã **–î–û–°–¢–£–ü–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:**
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã

üí° **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**
–ó–¥–µ—Å—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –æ–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–ª–∞–≥–∏–Ω–∞ –∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö —Ä–∞–±–æ—Ç—ã.

üìù **–ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:**
‚Ä¢ `/mc_start` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–≥–∏–Ω
‚Ä¢ `/mc_stop` - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–ª–∞–≥–∏–Ω
‚Ä¢ `/mc_toggle_auto` - –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–≤—ã–¥–∞—á—É
‚Ä¢ `/mc_pending` - –ü–æ–∫–∞–∑–∞—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã
"""
        
        if message_id:
            bot.edit_message_text(msg, chat_id, message_id, parse_mode='Markdown', reply_markup=markup)
        else:
            bot.send_message(chat_id, msg, parse_mode='Markdown', reply_markup=markup)
            
    except Exception as e:
        logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ show_general_category: {e}")
        error_msg = "‚ùå **–û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –û–ë–©–ò–• –ù–ê–°–¢–†–û–ï–ö**\n\n" \
                   f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}\n\n" \
                   "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–≥–∏–Ω."
        
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é", callback_data="back_to_main"))
        
        if message_id:
            bot.edit_message_text(error_msg, chat_id, message_id, parse_mode='Markdown', reply_markup=markup)
        else:
            bot.send_message(chat_id, error_msg, parse_mode='Markdown', reply_markup=markup)

def start_minecraft_plugin(message: types.Message):
    """–ó–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞"""
    global RUNNING, IS_STARTED, orders_info, pending_orders
    
    if RUNNING:
        bot.send_message(message.chat.id, "‚úÖ –ü–ª–∞–≥–∏–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return
    
    RUNNING = True
    IS_STARTED = True
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    orders_info = load_orders_info()
    pending_orders = load_pending_orders()
    
    logger.info(f"{LOGGER_PREFIX} –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(orders_info)} –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–∞–º—è—Ç—å")
    logger.info(f"{LOGGER_PREFIX} –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pending_orders)} –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
    logger.info(f"{LOGGER_PREFIX} –°–æ–∑–¥–∞—Ç–µ–ª—å @ilpajj, funpay - https://funpay.com/users/5327459/")
    
    bot.send_message(message.chat.id, "‚úÖ Minecraft Currency –ø–ª–∞–≥–∏–Ω –∑–∞–ø—É—â–µ–Ω.")
    logger.info(f"{LOGGER_PREFIX} –ü–ª–∞–≥–∏–Ω –∑–∞–ø—É—â–µ–Ω")

def stop_minecraft_plugin(message: types.Message):
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞"""
    global RUNNING
    
    if not RUNNING:
        bot.send_message(message.chat.id, "‚ùå –ü–ª–∞–≥–∏–Ω —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return
    
    RUNNING = False
    bot.send_message(message.chat.id, "‚ùå Minecraft Currency –ø–ª–∞–≥–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    logger.info(f"{LOGGER_PREFIX} –ü–ª–∞–≥–∏–Ω –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def toggle_auto_give(message: types.Message):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏ –≤–∞–ª—é—Ç—ã"""
    cfg = load_config()
    current_state = cfg.get('auto_give_currency', False)
    new_state = not current_state
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    cfg['auto_give_currency'] = new_state
    save_config(cfg)
    
    state_text = "‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê" if new_state else "‚ùå –û–¢–ö–õ–Æ–ß–ï–ù–ê"
    bot.send_message(message.chat.id, f"ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã: {state_text}")
    
    logger.info(f"{LOGGER_PREFIX} –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã {'–≤–∫–ª—é—á–µ–Ω–∞' if new_state else '–æ—Ç–∫–ª—é—á–µ–Ω–∞'} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    
    # –ï—Å–ª–∏ –≤–∫–ª—é—á–∏–ª–∏ –∞–≤—Ç–æ–≤—ã–¥–∞—á—É - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã
    if new_state:
        process_pending_orders_auto(message)

def process_pending_orders_auto(message: types.Message):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤"""
    global pending_orders
    
    # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã –≥–æ—Ç–æ–≤—ã–µ –∫ –≤—ã–¥–∞—á–µ (–∏–º–µ—é—Ç –Ω–∏–∫–Ω–µ–π–º)
    ready_orders = []
    for order_id, order_data in pending_orders.items():
        if (order_data.get('status') == 'ready_for_admin' and 
            order_data.get('minecraft_username') and
            not order_data.get('minecraft_username') == '–Ω–µ —É–∫–∞–∑–∞–Ω'):
            ready_orders.append((order_id, order_data))
    
    if not ready_orders:
        bot.send_message(message.chat.id, "üìã –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–µ.")
        return
    
    bot.send_message(message.chat.id, f"ü§ñ –ù–∞–π–¥–µ–Ω–æ {len(ready_orders)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏. –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    
    def process_all_orders():
        processed = 0
        successful = 0
        failed = 0
        
        for order_id, order_data in ready_orders:
            try:
                logger.info(f"{LOGGER_PREFIX} –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ #{order_id}")
                result = auto_complete_order_with_currency(order_id, message.chat.id)
                processed += 1
                
                if result:
                    successful += 1
                    logger.info(f"{LOGGER_PREFIX} ‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
                else:
                    failed += 1
                    logger.error(f"{LOGGER_PREFIX} ‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ #{order_id}")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
                time.sleep(3)
                
            except Exception as e:
                failed += 1
                logger.error(f"{LOGGER_PREFIX} –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ #{order_id}: {e}")
        
        # –û—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
        report_msg = f"üìä **–ê–í–¢–û–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n\n" \
                    f"‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {processed}\n" \
                    f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {successful} ‚úÖ\n" \
                    f"‚Ä¢ –û—à–∏–±–æ–∫: {failed} ‚ùå\n\n"
        
        if successful > 0:
            report_msg += f"üí∞ –í–∞–ª—é—Ç–∞ –≤—ã–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è {successful} –∑–∞–∫–∞–∑–æ–≤!"
        
        if failed > 0:
            report_msg += f"\n‚ö†Ô∏è {failed} –∑–∞–∫–∞–∑–æ–≤ —Ç—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏."
        
        try:
            bot.send_message(message.chat.id, report_msg, parse_mode='Markdown')
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=process_all_orders, daemon=True).start()

def handle_settings_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global user_states
    
    user_id = call.from_user.id
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
    if call.data == "show_bot_category":
        show_bot_category(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id)
        return
        
    elif call.data == "show_messages_category":
        show_messages_category(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id)
        return
        
    elif call.data == "show_orders_category":
        show_orders_category(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id)
        return
        
    elif call.data == "show_general_category":
        show_general_category(call.message.chat.id, call.message.message_id)
        bot.answer_callback_query(call.id)
        return
        
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        
    elif call.data == "back_to_main":
        # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
        try:
            cfg = load_config()
            
            # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            markup = InlineKeyboardMarkup(row_width=1)
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            markup.add(
                InlineKeyboardButton("ü§ñ –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê", callback_data="show_bot_category")
            )
            markup.add(
                InlineKeyboardButton("üí¨ –ù–ê–°–¢–†–û–ô–ö–ò –°–û–û–ë–©–ï–ù–ò–ô", callback_data="show_messages_category")
            )
            markup.add(
                InlineKeyboardButton("üìã –£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò", callback_data="show_orders_category")
            )
            # –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞–º–∏ —É–¥–∞–ª–µ–Ω–∞
            markup.add(
                InlineKeyboardButton("üîß –û–ë–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò", callback_data="show_general_category")
            )
            markup.add(
                InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="refresh_settings")
            )
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            notif_chat = cfg.get('notification_chat_id', '–ù–µ –∑–∞–¥–∞–Ω')
            status_text = "‚úÖ –ó–ê–ü–£–©–ï–ù" if RUNNING else "‚ùå –û–°–¢–ê–ù–û–í–õ–ï–ù"
            auto_give = cfg.get('auto_give_currency', False)
            bot_enabled = cfg.get('minecraft_bot', {}).get('enabled', False)
            bot_username = cfg.get('minecraft_bot', {}).get('bot_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
            bot_password = cfg.get('minecraft_bot', {}).get('password', '–Ω–µ —É–∫–∞–∑–∞–Ω')
            test_username = cfg.get('minecraft_bot', {}).get('test_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–æ–ª—å —è–≤–Ω–æ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
            masked_password = bot_password if bot_password != '–Ω–µ —É–∫–∞–∑–∞–Ω' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
            coins_per_unit = cfg.get('coins_per_unit', 1000000)
            
            # –ü–æ–¥—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–æ–≤
            orders_file_size = "–Ω/–¥"
            pending_file_size = "–Ω/–¥"
            try:
                if os.path.exists(ORDERS_PATH):
                    orders_file_size = f"{os.path.getsize(ORDERS_PATH)} –±–∞–π—Ç"
                if os.path.exists(PENDING_ORDERS_PATH):
                    pending_file_size = f"{os.path.getsize(PENDING_ORDERS_PATH)} –±–∞–π—Ç"
            except:
                pass
            
            msg = f"""üéÆ **MINECRAFT CURRENCY PLUGIN v{VERSION}**

üìä **–°–¢–ê–¢–£–°:** {status_text}

ü§ñ **MINECRAFT –ë–û–¢:**
‚Ä¢ –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã: {'‚úÖ –í–ö–õ–Æ–ß–ï–ù–ê' if auto_give else '‚ùå –í–´–ö–õ–Æ–ß–ï–ù–ê'}
‚Ä¢ –ù–∏–∫–Ω–µ–π–º –±–æ—Ç–∞: `{bot_username}`
‚Ä¢ –ü–∞—Ä–æ–ª—å –±–æ—Ç–∞: `{masked_password}`
‚Ä¢ –ë–æ—Ç –≤–∫–ª—é—á–µ–Ω: {'‚úÖ' if bot_enabled else '‚ùå'}
‚Ä¢ –°–µ—Ä–≤–µ—Ä: {cfg.get('minecraft_bot', {}).get('server', 'funtime.su')}
"""
            
            bot.edit_message_text(msg, call.message.chat.id, call.message.message_id, parse_mode='Markdown', reply_markup=markup)
            
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –≤ back_to_main: {e}")
            bot.edit_message_text(f"‚ùå **–û–®–ò–ë–ö–ê –ó–ê–ì–†–£–ó–ö–ò –ì–õ–ê–í–ù–û–ì–û –ú–ï–ù–Æ**\n\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", 
                                call.message.chat.id, call.message.message_id, parse_mode='Markdown')
        
        bot.answer_callback_query(call.id)
        return
        
    elif call.data == "show_password":
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å
        cfg = load_config()
        current_password = cfg.get('minecraft_bot', {}).get('password', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        bot.edit_message_text(
            "üëÅÔ∏è **–û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ü–ê–†–û–õ–Ø –ë–û–¢–ê**\n\n"
            f"**–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:** `{current_password}`\n\n"
            "üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**\n"
            "‚Ä¢ –ù–µ –¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º –ø–∞—Ä–æ–ª–µ–º —Å –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º–∏\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é' —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å\n\n"
            "‚ö†Ô∏è –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        bot.answer_callback_query(call.id)
        return
    elif call.data == "set_server_spooky":
        cfg = load_config()
        cfg.setdefault('minecraft_bot', {})['server'] = 'spookytime.net'
        save_config(cfg)
        try:
            bot.edit_message_text("‚úÖ –°–µ—Ä–≤–µ—Ä –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ `spookytime.net`. Node helper —á–∏—Ç–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ.", call.message.chat.id, call.message.message_id, parse_mode='Markdown')
        except Exception:
            pass
        bot.answer_callback_query(call.id)
        return
        
    elif call.data == "clear_order_files":
        # –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        bot.edit_message_text(
            "üóëÔ∏è **–û–ß–ò–°–¢–ö–ê –§–ê–ô–õ–û–í –ó–ê–ö–ê–ó–û–í**\n\n"
            "‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–∞—Ö:\n"
            "‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö\n"
            "‚Ä¢ –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π\n\n"
            "‚ùå **–î–ê–ù–ù–û–ï –î–ï–ô–°–¢–í–ò–ï –ù–ï–û–ë–†–ê–¢–ò–ú–û!**\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É, –æ—Ç–ø—Ä–∞–≤–∏–≤: **–û–ß–ò–°–¢–ò–¢–¨**",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        return
        
    elif call.data == "export_order_files":
        # –í—ã–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        try:
            files_info = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
            if os.path.exists(ORDERS_PATH):
                with open(ORDERS_PATH, 'rb') as f:
                    bot.send_document(call.message.chat.id, f, 
                                    caption="üìã **–§–∞–π–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö**\n"
                                           f"–†–∞–∑–º–µ—Ä: {os.path.getsize(ORDERS_PATH)} –±–∞–π—Ç")
                files_info.append("‚úÖ orders_info.json")
            else:
                files_info.append("‚ùå orders_info.json (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
                
            if os.path.exists(PENDING_ORDERS_PATH):
                with open(PENDING_ORDERS_PATH, 'rb') as f:
                    bot.send_document(call.message.chat.id, f,
                                    caption="‚è≥ **–§–∞–π–ª –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤**\n"
                                           f"–†–∞–∑–º–µ—Ä: {os.path.getsize(PENDING_ORDERS_PATH)} –±–∞–π—Ç")
                files_info.append("‚úÖ pending_orders.json")
            else:
                files_info.append("‚ùå pending_orders.json (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
                
            # –¢–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if os.path.exists(CONFIG_PATH):
                with open(CONFIG_PATH, 'rb') as f:
                    bot.send_document(call.message.chat.id, f,
                                    caption="‚öôÔ∏è **–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞**\n"
                                           f"–†–∞–∑–º–µ—Ä: {os.path.getsize(CONFIG_PATH)} –±–∞–π—Ç")
                files_info.append("‚úÖ config.json")
            else:
                files_info.append("‚ùå config.json (–Ω–µ –Ω–∞–π–¥–µ–Ω)")
                
            bot.edit_message_text(
                "üì§ **–í–´–ì–†–£–ó–ö–ê –§–ê–ô–õ–û–í –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
                "üìÇ **–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**\n" + "\n".join(files_info) + "\n\n"
                "üí° –≠—Ç–∏ —Ñ–∞–π–ª—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            bot.edit_message_text(
                f"‚ùå **–û–®–ò–ë–ö–ê –í–´–ì–†–£–ó–ö–ò**\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã: {e}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                call.message.chat.id,
                call.message.message_id,
                parse_mode='Markdown'
            )
        bot.answer_callback_query(call.id)
        return
            
    elif call.data == "change_bot_username":
        user_states[user_id] = "waiting_bot_username"
        cfg = load_config()
        current_username = cfg.get('minecraft_bot', {}).get('bot_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        bot.edit_message_text(
            "ü§ñ **–ò–ó–ú–ï–ù–ï–ù–ò–ï –ù–ò–ö–ù–ï–ô–ú–ê –ë–û–¢–ê**\n\n"
            f"**–¢–µ–∫—É—â–∏–π –Ω–∏–∫–Ω–µ–π–º:** `{current_username}`\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –¥–ª—è Minecraft –±–æ—Ç–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `nickname` –∏–ª–∏ `MyBot123`\n\n"
            "üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
            "‚Ä¢ –û—Ç 3 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –¢–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n\n"
            "‚ö†Ô∏è **–í–ê–ñ–ù–û!** –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∏–∫–Ω–µ–π–º–∞ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–æ–ª—å!\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —É –≤–∞—Å –µ—Å—Ç—å –∫ –Ω–µ–º—É –¥–æ—Å—Ç—É–ø!",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        bot.answer_callback_query(call.id)
        return
        
    elif call.data == "change_bot_password":
        user_states[user_id] = "waiting_bot_password"
        cfg = load_config()
        current_password = cfg.get('minecraft_bot', {}).get('password', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å —è–≤–Ω–æ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
        masked_password = current_password if current_password != '–Ω–µ —É–∫–∞–∑–∞–Ω' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        bot.edit_message_text(
            "üîë **–ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–ê–†–û–õ–Ø –ë–û–¢–ê**\n\n"
            f"**–¢–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:** `{masked_password}`\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ Minecraft –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n\n"
            "üìã **–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**\n"
            "‚Ä¢ –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤\n"
            "‚Ä¢ –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç—É –±–æ—Ç–∞\n\n"
            "üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:**\n"
            "–ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–ª–∞–≥–∏–Ω–∞.\n\n"
            "‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞—Ä–æ–ª—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞!",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        bot.answer_callback_query(call.id)
        return
        
    elif call.data == "change_test_username":
        user_states[user_id] = "waiting_test_username"
        cfg = load_config()
        current_test_username = cfg.get('minecraft_bot', {}).get('test_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        bot.edit_message_text(
            "üéØ **–ò–ó–ú–ï–ù–ï–ù–ò–ï –¢–ï–°–¢–û–í–û–ì–û –ù–ò–ö–ù–ï–ô–ú–ê**\n\n"
            f"**–¢–µ–∫—É—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:** `{current_test_username}`\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏–≥—Ä–æ–∫–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã `/mc_test_pay`.\n\n"
            "üìã **–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã `/mc_test_pay`\n"
            "‚Ä¢ –ù–∞ —ç—Ç–æ—Ç –Ω–∏–∫–Ω–µ–π–º –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è 1000 –º–æ–Ω–µ—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n\n"
            "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç\n"
            "‚Ä¢ –ò–ª–∏ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–Ω–ª–∞–π–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: `testplayer` –∏–ª–∏ `MyTestAccount`",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        bot.answer_callback_query(call.id)
        return
    
    elif call.data == "change_server_ip":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π IP/—Ö–æ—Å—Ç (–≤–æ–∑–º–æ–∂–µ–Ω —Ñ–æ—Ä–º–∞—Ç host:port)
        user_states[user_id] = "waiting_server_ip"
        cfg = load_config()
        current_server = cfg.get('minecraft_bot', {}).get('server', 'funtime.su')
        current_port = cfg.get('minecraft_bot', {}).get('port', 25565)
        bot.edit_message_text(
            "üåê **–ò–ó–ú–ï–ù–ï–ù–ò–ï IP**\n\n"
            f"**–¢–µ–∫—É—â–∏–π —Å–µ—Ä–≤–µ—Ä:** `{current_server}:{current_port}`\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π IP-—Å–µ—Ä–≤–µ—Ä–∞"
            "–ö –ø—Ä–∏–º–µ—Ä—É funtime.su –∏–ª–∏ spookytime.net",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        bot.answer_callback_query(call.id)
        return
        
    elif call.data == "change_after_payment":
        user_states[user_id] = "waiting_after_payment"
        cfg = load_config()
        current_text = cfg['messages']['after_payment']
        bot.edit_message_text(
            "üí¨ **–ò–ó–ú–ï–ù–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –ü–û–°–õ–ï –û–ü–õ–ê–¢–´**\n\n"
            f"**–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:**\n```\n{current_text}\n```\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞.\n\n"
            "üí° –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –æ–±—ä—è—Å–Ω—è—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º –≤ Minecraft.",
            call.message.chat.id,
            call.message.message_id,
            parse_mode='Markdown'
        )
        bot.answer_callback_query(call.id)
        return
        
    elif call.data == "change_processing":
        user_states[user_id] = "waiting_processing"
        cfg = load_config()
        current_text = cfg['messages']['processing']
        try:
            # Use HTML <pre> block so Telegram shows a proper code block with copy on supported clients
            esc = html.escape(str(current_text))
            msg_html = (
                "‚è≥ –ò–ó–ú–ï–ù–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –û–ë–†–ê–ë–û–¢–ö–ò\n\n"
                "–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n" + f"<pre>{esc}</pre>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {order_id}, {amount}, {username}\n\n"
                "–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–≥–¥–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —É–∫–∞–∑–∞–ª –Ω–∏–∫–Ω–µ–π–º –∏ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É."
            )
            bot.edit_message_text(msg_html, call.message.chat.id, call.message.message_id, parse_mode='HTML')
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (change_processing): {e}")
            try:
                esc = html.escape(str(current_text))
                fallback_html = "‚è≥ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ (—Ç–µ–∫—É—â–µ–µ):\n" + f"<pre>{esc}</pre>"
                bot.send_message(call.message.chat.id, fallback_html, parse_mode='HTML')
            except Exception:
                pass
        bot.answer_callback_query(call.id)
        return
        
    elif call.data == "change_completed":
        user_states[user_id] = "waiting_completed"
        cfg = load_config()
        current_text = cfg['messages']['completed']
        try:
            esc = html.escape(str(current_text))
            msg_html = (
                "‚úÖ –ò–ó–ú–ï–ù–ï–ù–ò–ï –¢–ï–ö–°–¢–ê –ó–ê–í–ï–†–®–ï–ù–ò–Ø\n\n"
                "–¢–µ–∫—É—â–∏–π —Ç–µ–∫—Å—Ç:\n" + f"<pre>{esc}</pre>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n"
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {order_id}, {amount}, {username}\n\n"
                "–≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫–æ–≥–¥–∞ –≤–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –∏–≥—Ä–æ–∫—É."
            )
            bot.edit_message_text(msg_html, call.message.chat.id, call.message.message_id, parse_mode='HTML')
        except Exception as e:
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è (change_completed): {e}")
            try:
                esc = html.escape(str(current_text))
                fallback_html = "‚úÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (—Ç–µ–∫—É—â–µ–µ):\n" + f"<pre>{esc}</pre>"
                bot.send_message(call.message.chat.id, fallback_html, parse_mode='HTML')
            except Exception:
                pass
        bot.answer_callback_query(call.id)
        return
        
    elif call.data == "show_all_settings":
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_full_settings_message = types.Message()
        show_full_settings_message.chat = call.message.chat
        show_full_settings(show_full_settings_message)
        bot.answer_callback_query(call.id)
        return
        
    elif call.data == "refresh_settings":
        refresh_message = types.Message()
        refresh_message.chat = call.message.chat
        refresh_message.message_id = call.message.message_id
        bot.delete_message(call.message.chat.id, call.message.message_id)
        minecraft_currency_settings(refresh_message)
        bot.answer_callback_query(call.id)
        return
        
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ—Ç–∞–º–∏ —É–¥–∞–ª–µ–Ω–æ ‚Äî –≤—Å–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ callback'–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã
        
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "loading" –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    bot.answer_callback_query(call.id)

def handle_settings_input(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    global user_states
    
    user_id = message.from_user.id
    
    if user_id not in user_states:
        return
        
    state = user_states[user_id]
    new_value = message.text.strip()
    
    cfg = load_config()
    
    if state == "waiting_bot_username":
        # –ò–∑–º–µ–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞
        if len(new_value) < 3 or len(new_value) > 16:
            bot.send_message(message.chat.id, 
                           "‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤!\n"
                           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
        if not new_value.replace('_', '').isalnum():
            bot.send_message(message.chat.id, 
                           "‚ùå –ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è!\n"
                           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        old_username = cfg.get('minecraft_bot', {}).get('bot_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º minecraft_bot –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'minecraft_bot' not in cfg:
            cfg['minecraft_bot'] = {}
            
        cfg['minecraft_bot']['bot_username'] = new_value
        save_config(cfg)
        
        bot.send_message(message.chat.id, 
                        f"‚úÖ **–ù–ò–ö–ù–ï–ô–ú –ë–û–¢–ê –ò–ó–ú–ï–ù–ï–ù**\n\n"
                        f"**–°—Ç–∞—Ä—ã–π –Ω–∏–∫–Ω–µ–π–º:** `{old_username}`\n"
                        f"**–ù–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:** `{new_value}`\n\n"
                        f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∏–∫–Ω–µ–π–º `{new_value}` –¥–ª—è –≤—Ö–æ–¥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n\n"
                        f"‚ö†Ô∏è **–í–ê–ñ–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï:**\n"
                        f"ÔøΩ –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –ø–∞—Ä–æ–ª—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É!\n"
                        f"üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å' –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å.\n\n"
                        f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /mc_test_bot",
                        parse_mode='Markdown')
        
        logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –Ω–∏–∫–Ω–µ–π–º –±–æ—Ç–∞: {old_username} ‚Üí {new_value}")
        
    elif state == "waiting_bot_password":
        # –ò–∑–º–µ–Ω—è–µ–º –ø–∞—Ä–æ–ª—å –±–æ—Ç–∞
        if len(new_value) < 6:
            bot.send_message(message.chat.id, 
                           "‚ùå –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤!\n"
                           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º minecraft_bot –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'minecraft_bot' not in cfg:
            cfg['minecraft_bot'] = {}
            
        cfg['minecraft_bot']['password'] = new_value
        save_config(cfg)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —è–≤–Ω–æ (–ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é)
        masked_password = new_value

        bot.send_message(message.chat.id, 
                        f"‚úÖ **–ü–ê–†–û–õ–¨ –ë–û–¢–ê –ò–ó–ú–ï–ù–ï–ù**\n\n"
                        f"**–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:** `{masked_password}` ({len(new_value)} —Å–∏–º–≤–æ–ª–æ–≤)\n\n"
                        f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ü–∞—Ä–æ–ª—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –≤—Ö–æ–¥–∞ –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä.\n\n"
                        f"üîí **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:** –ü–∞—Ä–æ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞–≥–∏–Ω–∞.\n\n"
                        f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /mc_test_bot",
                        parse_mode='Markdown')

        logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª –ø–∞—Ä–æ–ª—å –±–æ—Ç–∞ (–¥–ª–∏–Ω–∞: {len(new_value)} —Å–∏–º–≤–æ–ª–æ–≤)")

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        try:
            bot.delete_message(message.chat.id, message.message_id)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        
    elif state == "waiting_test_username":
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º
        if len(new_value) < 3 or len(new_value) > 16:
            bot.send_message(message.chat.id, 
                           "‚ùå –ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 3 –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤!\n"
                           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è)
        if not new_value.replace('_', '').isalnum():
            bot.send_message(message.chat.id, 
                           "‚ùå –ù–∏–∫–Ω–µ–π–º –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è!\n"
                           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        old_test_username = cfg.get('minecraft_bot', {}).get('test_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º minecraft_bot –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'minecraft_bot' not in cfg:
            cfg['minecraft_bot'] = {}
            
        cfg['minecraft_bot']['test_username'] = new_value
        save_config(cfg)
        
        bot.send_message(message.chat.id, 
                        f"‚úÖ **–¢–ï–°–¢–û–í–´–ô –ù–ò–ö–ù–ï–ô–ú –ò–ó–ú–ï–ù–ï–ù**\n\n"
                        f"**–°—Ç–∞—Ä—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:** `{old_test_username}`\n"
                        f"**–ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º:** `{new_value}`\n\n"
                        f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å –∫–æ–º–∞–Ω–¥–∞ `/mc_test_pay` –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å 1000 –º–æ–Ω–µ—Ç –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç `{new_value}`.\n\n"
                        f"üéØ **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:**\n"
                        f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/mc_test_pay` –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞\n"
                        f"‚Ä¢ –ù–∞ `{new_value}` –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ 1000 —Ç–µ—Å—Ç–æ–≤—ã—Ö –º–æ–Ω–µ—Ç\n"
                        f"‚Ä¢ –ü–æ–º–æ–≥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤\n\n"
                        f"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫ –æ–Ω–ª–∞–π–Ω –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏!",
                        parse_mode='Markdown')
        
        logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Ç–µ—Å—Ç–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º: {old_test_username} ‚Üí {new_value}")
    
    elif state == "waiting_server_ip":
        # –û–∂–∏–¥–∞–µ–º –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞ –∏–ª–∏ ip[:port]
        # –î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: example.com, 1.2.3.4, example.com:25565, 1.2.3.4:25566
        val = new_value
        host = None
        port = None

        # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –¥–≤–æ–µ—Ç–æ—á–∏—é –¥–ª—è –ø–æ—Ä—Ç–∞
        if ':' in val:
            parts = val.rsplit(':', 1)
            host = parts[0].strip()
            port_part = parts[1].strip()
            if not port_part.isdigit():
                bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –ø–æ—Ä—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä: example.com:25565")
                return
            port = int(port_part)
        else:
            host = val.strip()

        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ö–æ—Å—Ç–∞ (–Ω–µ –ø—É—Å—Ç–æ–π, –Ω–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
        if not host or len(host) > 253:
            bot.send_message(message.chat.id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ—Å—Ç/IP. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥–µ
        if 'minecraft_bot' not in cfg:
            cfg['minecraft_bot'] = {}
        cfg['minecraft_bot']['server'] = host
        if port is not None:
            cfg['minecraft_bot']['port'] = port
        else:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ—Ä—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –∫–æ–Ω—Ñ–∏–≥–µ
            cfg['minecraft_bot'].setdefault('port', 25565)

        save_config(cfg)

        bot.send_message(message.chat.id,
                        f"‚úÖ **–°–ï–†–í–ï–† –ò–ó–ú–ï–ù–Å–ù**\n\n**–ù–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä:** `{cfg['minecraft_bot']['server']}:{cfg['minecraft_bot'].get('port', 25565)}`\n\n–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.",
                        parse_mode='Markdown')

        logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Å–µ—Ä–≤–µ—Ä Minecraft: {cfg['minecraft_bot']['server']}:{cfg['minecraft_bot'].get('port', 25565)}")
        
    elif state == "waiting_after_payment":
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        if len(new_value) > 1000:
            bot.send_message(message.chat.id, 
                           "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        cfg['messages']['after_payment'] = new_value
        save_config(cfg)
        
        bot.send_message(message.chat.id, 
                        f"‚úÖ **–¢–ï–ö–°–¢ –ü–û–°–õ–ï –û–ü–õ–ê–¢–´ –ò–ó–ú–ï–ù–ï–ù**\n\n"
                        f"**–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:**\n```\n{new_value}\n```\n\n"
                        f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã.",
                        parse_mode='Markdown')
        
        logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã")
        
    elif state == "waiting_processing":
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if len(new_value) > 1000:
            bot.send_message(message.chat.id, 
                           "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        required_vars = ['{order_id}', '{amount}', '{username}']
        missing_vars = [var for var in required_vars if var not in new_value]
        
        if missing_vars:
            bot.send_message(message.chat.id, 
                           f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –í —Ç–µ–∫—Å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
                           f"‚Ä¢ {', '.join(missing_vars)}\n\n"
                           f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.\n"
                           f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
            user_states[user_id] = "confirm_processing"
            user_states[f"{user_id}_temp"] = new_value
            return
            
        cfg['messages']['processing'] = new_value
        save_config(cfg)
        
        bot.send_message(message.chat.id, 
                        f"‚úÖ **–¢–ï–ö–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –ò–ó–ú–ï–ù–ï–ù**\n\n"
                        f"**–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:**\n```\n{new_value}\n```\n\n"
                        f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–æ–≤.",
                        parse_mode='Markdown')
        
        logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")
        
    elif state == "waiting_completed":
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        if len(new_value) > 1000:
            bot.send_message(message.chat.id, 
                           "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                           "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        required_vars = ['{order_id}', '{amount}', '{username}']
        missing_vars = [var for var in required_vars if var not in new_value]
        
        if missing_vars:
            bot.send_message(message.chat.id, 
                           f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –í —Ç–µ–∫—Å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
                           f"‚Ä¢ {', '.join(missing_vars)}\n\n"
                           f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.\n"
                           f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
            user_states[user_id] = "confirm_completed"
            user_states[f"{user_id}_temp"] = new_value
            return
            
        cfg['messages']['completed'] = new_value
        save_config(cfg)
        
        bot.send_message(message.chat.id, 
                        f"‚úÖ **–¢–ï–ö–°–¢ –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ò–ó–ú–ï–ù–ï–ù**\n\n"
                        f"**–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:**\n```\n{new_value}\n```\n\n"
                        f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.",
                        parse_mode='Markdown')
        
        logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        
    elif state == "confirm_processing":
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç '–¥–∞' ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º temp; –∏–Ω–∞—á–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        if new_value.lower() == "–¥–∞":
            temp_text = user_states.pop(f"{user_id}_temp", "")
            cfg['messages']['processing'] = temp_text
            save_config(cfg)

            bot.send_message(message.chat.id, 
                            f"‚úÖ **–¢–ï–ö–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –°–û–•–†–ê–ù–ï–ù**\n\n"
                            f"**–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:**\n```\n{temp_text}\n```\n\n"
                            f"‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                            parse_mode='Markdown')

            user_states.pop(f"{user_id}_temp", None)
            # –û—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in user_states:
                del user_states[user_id]
            logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        else:
            # –í–æ—Å–ø—Ä–∏–Ω—è—Ç—å –≤–≤–æ–¥ –∫–∞–∫ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç ‚Äî –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if len(new_value) > 1000:
                bot.send_message(message.chat.id, 
                               "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                               "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                # –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ confirm_processing —á—Ç–æ–±—ã –∞–¥–º–∏–Ω –º–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–Ω–æ–≤–∞
                user_states[f"{user_id}_temp"] = new_value
                return

            required_vars = ['{order_id}', '{amount}', '{username}']
            missing_vars = [var for var in required_vars if var not in new_value]

            if missing_vars:
                bot.send_message(message.chat.id, 
                               f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –í —Ç–µ–∫—Å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
                               f"‚Ä¢ {', '.join(missing_vars)}\n\n"
                               f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.\n"
                               f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
                user_states[user_id] = "confirm_processing"
                user_states[f"{user_id}_temp"] = new_value
                return

            cfg['messages']['processing'] = new_value
            save_config(cfg)

            bot.send_message(message.chat.id, 
                            f"‚úÖ **–¢–ï–ö–°–¢ –û–ë–†–ê–ë–û–¢–ö–ò –ò–ó–ú–ï–ù–ï–ù**\n\n"
                            f"**–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:**\n```\n{new_value}\n```\n\n"
                            f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–æ–≤.",
                            parse_mode='Markdown')

            # –û—á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_id in user_states:
                del user_states[user_id]

            logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞")

    elif state == "confirm_completed":
        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç '–¥–∞' ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º temp; –∏–Ω–∞—á–µ –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        if new_value.lower() == "–¥–∞":
            temp_text = user_states.pop(f"{user_id}_temp", "")
            cfg['messages']['completed'] = temp_text
            save_config(cfg)

            bot.send_message(message.chat.id, 
                            f"‚úÖ **–¢–ï–ö–°–¢ –ó–ê–í–ï–†–®–ï–ù–ò–Ø –°–û–•–†–ê–ù–ï–ù**\n\n"
                            f"**–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:**\n```\n{temp_text}\n```\n\n"
                            f"‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –±–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö. –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫.",
                            parse_mode='Markdown')

            user_states.pop(f"{user_id}_temp", None)
            if user_id in user_states:
                del user_states[user_id]
            logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        else:
            # –í–æ—Å–ø—Ä–∏–Ω—è—Ç—å –≤–≤–æ–¥ –∫–∞–∫ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç ‚Äî –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            if len(new_value) > 1000:
                bot.send_message(message.chat.id, 
                               "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π! –ú–∞–∫—Å–∏–º—É–º 1000 —Å–∏–º–≤–æ–ª–æ–≤.\n"
                               "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                user_states[f"{user_id}_temp"] = new_value
                return

            required_vars = ['{order_id}', '{amount}', '{username}']
            missing_vars = [var for var in required_vars if var not in new_value]

            if missing_vars:
                bot.send_message(message.chat.id, 
                               f"‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï!** –í —Ç–µ–∫—Å—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤–∞–∂–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:\n"
                               f"‚Ä¢ {', '.join(missing_vars)}\n\n"
                               f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ.\n"
                               f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–¥–∞' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
                user_states[user_id] = "confirm_completed"
                user_states[f"{user_id}_temp"] = new_value
                return

            cfg['messages']['completed'] = new_value
            save_config(cfg)

            bot.send_message(message.chat.id, 
                            f"‚úÖ **–¢–ï–ö–°–¢ –ó–ê–í–ï–†–®–ï–ù–ò–Ø –ò–ó–ú–ï–ù–ï–ù**\n\n"
                            f"**–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç:**\n```\n{new_value}\n```\n\n"
                            f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –≠—Ç–æ—Ç —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤.",
                            parse_mode='Markdown')

            if user_id in user_states:
                del user_states[user_id]

            logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–∑–º–µ–Ω–∏–ª —Ç–µ–∫—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")
        
    elif state == "confirm_clear_files" and new_value == "–û–ß–ò–°–¢–ò–¢–¨":
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–æ–≤
        global pending_orders, orders_info
        
        try:
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ
            pending_count = len(pending_orders)
            info_count = len(orders_info)
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
            pending_orders.clear()
            orders_info.clear()
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
            files_deleted = []
            if os.path.exists(ORDERS_PATH):
                os.remove(ORDERS_PATH)
                files_deleted.append("‚úÖ orders_info.json")
            if os.path.exists(PENDING_ORDERS_PATH):
                os.remove(PENDING_ORDERS_PATH)
                files_deleted.append("‚úÖ pending_orders.json")
                
            # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
            save_orders_info({})
            save_pending_orders({})
            
            bot.send_message(message.chat.id, 
                            f"üóëÔ∏è **–û–ß–ò–°–¢–ö–ê –§–ê–ô–õ–û–í –ó–ê–í–ï–†–®–ï–ù–ê**\n\n"
                            f"üìä **–£–¥–∞–ª–µ–Ω–æ –∏–∑ –ø–∞–º—è—Ç–∏:**\n"
                            f"‚Ä¢ –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤: {pending_count}\n"
                            f"‚Ä¢ –ó–∞–ø–∏—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {info_count}\n\n"
                            f"üìÇ **–£–¥–∞–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**\n" + 
                            ("\n".join(files_deleted) if files_deleted else "‚Ä¢ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã") + "\n\n"
                            f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—á–∏—â–µ–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å –Ω–æ–≤—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏!",
                            parse_mode='Markdown')
            
            logger.info(f"{LOGGER_PREFIX} –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—á–∏—Å—Ç–∏–ª —Ñ–∞–π–ª—ã –∑–∞–∫–∞–∑–æ–≤: pending={pending_count}, info={info_count}")
            
        except Exception as e:
            bot.send_message(message.chat.id, 
                            f"‚ùå **–û–®–ò–ë–ö–ê –û–ß–ò–°–¢–ö–ò**\n\n"
                            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å —Ñ–∞–π–ª—ã: {e}\n\n"
                            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /mc_clear –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —á–µ—Ä–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±.",
                            parse_mode='Markdown')
            logger.error(f"{LOGGER_PREFIX} –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤: {e}")
            
    elif state == "confirm_clear_files":
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.send_message(message.chat.id, 
                        "‚ùå **–û–ß–ò–°–¢–ö–ê –û–¢–ú–ï–ù–ï–ù–ê**\n\n"
                        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ: **–û–ß–ò–°–¢–ò–¢–¨**\n\n"
                        "–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")
    
    elif state == "waiting_lot_add" or state == "waiting_lot_remove":
        # –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞–º–∏ –æ—Ç–∫–ª—é—á—ë–Ω
        bot.send_message(message.chat.id, "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ID –ª–æ—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ.")
        logger.info(f"{LOGGER_PREFIX} –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞–º–∏ ‚Äî —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in user_states:
        del user_states[user_id]

def init_commands(c_: Cardinal):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –ø–ª–∞–≥–∏–Ω–∞"""
    global bot, cardinal_instance
    
    cardinal_instance = c_
    bot = c_.telegram.bot
    
    logger.info(f"{LOGGER_PREFIX} –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    global orders_info, pending_orders
    orders_info = load_orders_info()
    pending_orders = load_pending_orders()
    
    logger.info(f"{LOGGER_PREFIX} –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(orders_info)} –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–∞–º—è—Ç—å")
    logger.info(f"{LOGGER_PREFIX} –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(pending_orders)} –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
    @bot.message_handler(commands=['mc_settings'])
    def mc_settings_handler(message):
        minecraft_currency_settings(message)
    
    @bot.message_handler(commands=['mc_start'])
    def mc_start_handler(message):
        start_minecraft_plugin(message)
    
    @bot.message_handler(commands=['mc_stop'])
    def mc_stop_handler(message):
        stop_minecraft_plugin(message)
    
    @bot.message_handler(commands=['mc_pending'])
    def mc_pending_handler(message):
        show_pending_orders(message)
    
    @bot.message_handler(commands=['mc_clear'])
    def mc_clear_handler(message):
        clear_all_orders(message)
    
    @bot.message_handler(commands=['mc_toggle_auto'])
    def mc_toggle_auto_handler(message):
        toggle_auto_give(message)
    
    @bot.message_handler(commands=['mc_process_all'])
    def mc_process_all_handler(message):
        process_pending_orders_auto(message)
    
    @bot.message_handler(commands=['mc_test_pay'])
    def mc_test_pay_handler(message):
        """–¢–µ—Å—Ç–æ–≤—ã–π –ø–µ—Ä–µ–≤–æ–¥ –≤–∞–ª—é—Ç—ã"""
        cfg = load_config()
        test_username = cfg.get('minecraft_bot', {}).get('test_username', '–Ω–µ —É–∫–∞–∑–∞–Ω')
        
        bot.send_message(message.chat.id, f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–≤–æ–¥ 1000 –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {test_username}...")
        
        def test_pay_thread():
            try:
                result = give_minecraft_currency(test_username, 1000)
                if result['success']:
                    bot.send_message(message.chat.id, 
                                   f"‚úÖ **–¢–ï–°–¢–û–í–´–ô –ü–ï–†–ï–í–û–î –£–°–ü–ï–®–ï–ù!**\n\n"
                                   f"üéØ –ò–≥—Ä–æ–∫: `{test_username}`\n"
                                   f"üí∞ –°—É–º–º–∞: 1,000 –º–æ–Ω–µ—Ç\n\n"
                                   f"‚ú® {result['message']}\n\n"
                                   f"üîß –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞ (/mc_settings ‚Üí ü§ñ –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ‚Üí üéØ –¢–µ—Å—Ç–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º)",
                                   parse_mode='Markdown')
                else:
                    bot.send_message(message.chat.id, 
                                   f"‚ùå **–û–®–ò–ë–ö–ê –¢–ï–°–¢–û–í–û–ì–û –ü–ï–†–ï–í–û–î–ê**\n\n"
                                   f"üéØ –ò–≥—Ä–æ–∫: `{test_username}`\n"
                                   f"üí∞ –°—É–º–º–∞: 1,000 –º–æ–Ω–µ—Ç\n\n"
                                   f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {result['message']}\n\n"
                                   f"üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n"
                                   f"‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É (/mc_test_bot)\n"
                                   f"‚Ä¢ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∏–∫–Ω–µ–π–º–∞ (/mc_settings)\n"
                                   f"‚Ä¢ –ß—Ç–æ –∏–≥—Ä–æ–∫ {test_username} –æ–Ω–ª–∞–π–Ω\n"
                                   f"‚Ä¢ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ —É –±–æ—Ç–∞",
                                   parse_mode='Markdown')
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        threading.Thread(target=test_pay_thread, daemon=True).start()
    
    @bot.message_handler(commands=['mc_force_auto'])
    def mc_force_auto_handler(message):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏"""
        bot.send_message(message.chat.id, "üîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–≤—ã–¥–∞—á—É –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤...")
        
        def force_auto_thread():
            try:
                global pending_orders
                ready_orders = []
                
                # –ù–∞—Ö–æ–¥–∏–º –í–°–ï –∑–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º ready_for_admin –∏–ª–∏ –∏–º–µ—é—â–∏–µ –Ω–∏–∫–Ω–µ–π–º
                for order_id, order_data in pending_orders.items():
                    username = order_data.get('minecraft_username')
                    if username and username != '–Ω–µ —É–∫–∞–∑–∞–Ω':
                        ready_orders.append((order_id, order_data))
                        bot.send_message(message.chat.id, f"üéØ –ù–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ #{order_id} –¥–ª—è {username}")
                
                if not ready_orders:
                    bot.send_message(message.chat.id, "‚ùå –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ –∞–≤—Ç–æ–≤—ã–¥–∞—á–µ")
                    return
                
                for order_id, order_data in ready_orders:
                    username = order_data.get('minecraft_username')
                    amount = order_data.get('amount', 0)
                    
                    bot.send_message(message.chat.id, f"ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–≤—ã–¥–∞—á—É –¥–ª—è #{order_id}: {amount:,} –º–æ–Ω–µ—Ç ‚Üí {username}")
                    
                    result = auto_complete_order_with_currency(order_id, message.chat.id)
                    if result:
                        bot.send_message(message.chat.id, f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!")
                    else:
                        bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ #{order_id}")
                    
                    time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–∫–∞–∑–∞–º–∏
                        
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        
        threading.Thread(target=force_auto_thread, daemon=True).start()
    
    @bot.message_handler(commands=['mc_test_bot'])
    def mc_test_bot_handler(message):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Minecraft –±–æ—Ç–∞"""
        bot.send_message(message.chat.id, "ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Minecraft –±–æ—Ç–∞...")
        
        def test_thread():
            try:
                result = test_minecraft_bot_connection()
                if result:
                    bot.send_message(message.chat.id, "‚úÖ Minecraft –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É!")
                else:
                    bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Minecraft –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ª–æ–≥–∏.")
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        threading.Thread(target=test_thread, daemon=True).start()
    
    # –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ—Ç–∞–º–∏ —É–¥–∞–ª–µ–Ω—ã
    
    # /mc_lot_add —É–¥–∞–ª–µ–Ω–∞
    
    # /mc_lot_remove —É–¥–∞–ª–µ–Ω–∞
    
    # /mc_lot_toggle –∏ /mc_filter —É–¥–∞–ª–µ–Ω—ã

    # /mc_lot_clear —É–¥–∞–ª–µ–Ω–∞
    
    @bot.message_handler(func=lambda message: message.text and message.text.startswith('/complete_'))
    def complete_handler(message):
        order_id = message.text.replace('/complete_', '')
        complete_order(message, order_id)
    
    @bot.message_handler(func=lambda message: message.text and message.text.startswith('/auto_'))
    def auto_complete_handler(message):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤—ã–¥–∞—á–∞ –≤–∞–ª—é—Ç—ã"""
        order_id = message.text.replace('/auto_', '')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if order_id not in pending_orders:
            bot.send_message(message.chat.id, f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∂–∏–¥–∞—é—â–∏—Ö.")
            return
        
        order_data = pending_orders[order_id]
        username = order_data.get('minecraft_username')
        amount = order_data.get('amount', 0)
        
        if not username:
            bot.send_message(message.chat.id, f"‚ùå –î–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∏–∫–Ω–µ–π–º Minecraft.")
            return
        
        bot.send_message(message.chat.id, f"ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤—ã–¥–∞—á—É {amount:,} –º–æ–Ω–µ—Ç –∏–≥—Ä–æ–∫—É {username}...")
        
        def auto_give_thread():
            try:
                result = auto_complete_order_with_currency(order_id, message.chat.id)
                if result:
                    bot.send_message(message.chat.id, f"‚úÖ –í–∞–ª—é—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
                else:
                    bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏ –≤–∞–ª—é—Ç—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")
            except Exception as e:
                bot.send_message(message.chat.id, f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–≤—Ç–æ–≤—ã–¥–∞—á–∏: {e}")
        
        threading.Thread(target=auto_give_thread, daemon=True).start()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏)
    @bot.callback_query_handler(func=lambda call: call.data in [
        'show_bot_category', 'show_messages_category', 'show_orders_category', 'show_general_category',
    'back_to_main', 'change_bot_username', 'change_bot_password', 'change_test_username', 'change_after_payment', 
        'change_processing', 'change_completed', 'show_all_settings', 'refresh_settings', 
        'show_password', 'clear_order_files', 'export_order_files', 'bot_category_header', 
    'set_server_spooky', 'change_server_ip', 'messages_category_header', 'orders_category_header', 'general_category_header'
    ])
    def settings_callback_handler(call):
        handle_settings_callback(call)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
    @bot.message_handler(func=lambda message: message.from_user.id in user_states)
    def settings_input_handler(message):
        handle_settings_input(message)
    
    @bot.message_handler(func=lambda message: message.text and message.text.startswith('/cancel_'))
    def cancel_handler(message):
        order_id = message.text.replace('/cancel_', '')
        cancel_order(message, order_id)
    
    # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
    cfg = load_config()
    if cfg.get('auto_start', True):
        global RUNNING
        RUNNING = True
        logger.info(f"{LOGGER_PREFIX} –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    logger.info(f"{LOGGER_PREFIX} –ü–ª–∞–≥–∏–Ω —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    # –í—ã–≤–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    logger.info(f"{LOGGER_PREFIX} ========================================")
    logger.info(f"{LOGGER_PREFIX} MINECRAFT CURRENCY PLUGIN v{VERSION}")
    logger.info(f"{LOGGER_PREFIX} {DESCRIPTION}")
    logger.info(f"{LOGGER_PREFIX} –°–æ–∑–¥–∞—Ç–µ–ª—å @ilpajj, funpay - https://funpay.com/users/5327459/")
    logger.info(f"{LOGGER_PREFIX} ========================================")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
BIND_TO_PRE_INIT = [init_commands]
BIND_TO_NEW_MESSAGE = [minecraft_currency_handler]
BIND_TO_NEW_ORDER = [minecraft_currency_handler]
BIND_TO_DELETE = None

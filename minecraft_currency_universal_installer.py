#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Minecraft Currency Plugin - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
–í–µ—Ä—Å–∏—è: 2.0
–ê–≤—Ç–æ—Ä: FunPayCardinal Plugin

–≠—Ç–æ—Ç —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –í–°–ï –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
- Node.js (–µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
- –í—Å–µ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–≥–∏–Ω–∞
- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

–¢—Ä–µ–±—É–µ—Ç —Ç–æ–ª—å–∫–æ Python 3.7+ –∏ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.
"""

import os
import sys
import json
import subprocess
import shutil
import platform
import tempfile
import zipfile
import urllib.request
import urllib.error
import time
import threading
from pathlib import Path

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ (—Ä–∞–±–æ—Ç–∞—é—Ç –≤ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–µ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–≤)
class Colors:
    RED = '\033[91m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    BLUE = '\033[94m'
    PURPLE = '\033[95m'
    CYAN = '\033[96m'
    WHITE = '\033[97m'
    BOLD = '\033[1m'
    END = '\033[0m'

def print_colored(text, color=Colors.WHITE):
    """–í—ã–≤–æ–¥ —Ü–≤–µ—Ç–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —Ñ–æ–ª–ª–±—ç–∫–æ–º –¥–ª—è Windows"""
    try:
        # –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É ANSI –≤ Windows 10+
        if platform.system() == "Windows":
            import ctypes
            kernel32 = ctypes.windll.kernel32
            kernel32.SetConsoleMode(kernel32.GetStdHandle(-11), 7)
        
        print(f"{color}{text}{Colors.END}")
    except:
        # –§–æ–ª–ª–±—ç–∫ –±–µ–∑ —Ü–≤–µ—Ç–æ–≤
        print(text)

def print_header():
    """–ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞"""
    print_colored("=" * 70, Colors.CYAN)
    print_colored("üéÆ MINECRAFT CURRENCY PLUGIN - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –£–°–¢–ê–ù–û–í–©–ò–ö", Colors.BOLD + Colors.GREEN)
    print_colored("   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –í–°–ï–• –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤", Colors.WHITE)
    print_colored("   –í–µ—Ä—Å–∏—è: 2.0 | –î–ª—è FunPay Cardinal", Colors.WHITE)
    print_colored("=" * 70, Colors.CYAN)

def show_progress_bar(current, total, prefix="–ü—Ä–æ–≥—Ä–µ—Å—Å", length=50):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
    if total == 0:
        return
    
    filled_length = int(length * current // total)
    bar = '‚ñà' * filled_length + '-' * (length - filled_length)
    percent = ("{0:.1f}").format(100 * (current / float(total)))
    
    print_colored(f'\r{prefix} |{bar}| {percent}% Complete', Colors.BLUE, end='')
    if current == total:
        print()  # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

def download_with_progress(url, destination, description="–ó–∞–≥—Ä—É–∑–∫–∞"):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º"""
    print_colored(f"\nüì• {description}...", Colors.YELLOW)
    print_colored(f"üîó URL: {url}", Colors.WHITE)
    
    try:
        def progress_hook(block_num, block_size, total_size):
            if total_size > 0:
                downloaded = block_num * block_size
                show_progress_bar(downloaded, total_size, f"üì• {description}")
        
        urllib.request.urlretrieve(url, destination, reporthook=progress_hook)
        print_colored(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–∞", Colors.GREEN)
        return True
        
    except Exception as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ {description.lower()}: {e}", Colors.RED)
        return False

def check_internet_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    print_colored("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...", Colors.YELLOW)
    
    test_urls = [
        "https://www.google.com",
        "https://nodejs.org",
        "https://pypi.org"
    ]
    
    for url in test_urls:
        try:
            urllib.request.urlopen(url, timeout=10)
            print_colored(f"‚úÖ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ", Colors.GREEN)
            return True
        except:
            continue
    
    print_colored("‚ùå –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!", Colors.RED)
    print_colored("üìã –î–ª—è —Ä–∞–±–æ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –¥–ª—è:", Colors.YELLOW)
    print_colored("   ‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏—è Node.js", Colors.WHITE)
    print_colored("   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∏ npm –ø–∞–∫–µ—Ç–æ–≤", Colors.WHITE)
    print_colored("   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π", Colors.WHITE)
    return False

def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print_colored("\nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python...", Colors.YELLOW)
    
    python_version = sys.version_info
    if python_version.major < 3 or (python_version.major == 3 and python_version.minor < 7):
        print_colored(f"‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.7+, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {python_version.major}.{python_version.minor}", Colors.RED)
        print_colored("üìã –°–∫–∞—á–∞–π—Ç–µ –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é —Å https://python.org/downloads/", Colors.YELLOW)
        return False
    
    print_colored(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro} - OK", Colors.GREEN)
    return True

def install_python_packages():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤"""
    print_colored("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...", Colors.YELLOW)
    
    packages = [
        "aiofiles",
        "asyncio",
        "requests",
        "urllib3"
    ]
    
    for package in packages:
        try:
            print_colored(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}...", Colors.CYAN)
            result = subprocess.run([sys.executable, "-m", "pip", "install", package], 
                                  capture_output=True, text=True, timeout=300)
            
            if result.returncode == 0:
                print_colored(f"‚úÖ {package} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", Colors.GREEN)
            else:
                print_colored(f"‚ö†Ô∏è {package} - –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: {result.stderr[:100]}", Colors.YELLOW)
                
        except subprocess.TimeoutExpired:
            print_colored(f"‚ö†Ô∏è {package} - —Ç–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏", Colors.YELLOW)
        except Exception as e:
            print_colored(f"‚ö†Ô∏è {package} - –æ—à–∏–±–∫–∞: {e}", Colors.YELLOW)
    
    print_colored("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", Colors.GREEN)
    return True

def detect_system_info():
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    system = platform.system().lower()
    machine = platform.machine().lower()
    
    print_colored(f"\nüñ•Ô∏è –°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}", Colors.CYAN)
    print_colored(f"üîß –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}", Colors.CYAN)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è Node.js
    if "64" in machine or "amd64" in machine or "x86_64" in machine:
        arch = "x64"
    elif "arm64" in machine or "aarch64" in machine:
        arch = "arm64"
    else:
        arch = "x86"
    
    return system, arch

def check_nodejs_installation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js"""
    print_colored("\nüü¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js...", Colors.YELLOW)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è Node.js
    node_commands = ['node', 'nodejs']
    npm_commands = ['npm', 'npm.cmd']
    
    node_found = False
    npm_found = False
    node_version = None
    npm_version = None
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    for cmd in node_commands:
        try:
            result = subprocess.run([cmd, '--version'], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                node_version = result.stdout.strip()
                node_found = True
                print_colored(f"‚úÖ Node.js –Ω–∞–π–¥–µ–Ω: {node_version}", Colors.GREEN)
                break
        except:
            continue
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ npm
    for cmd in npm_commands:
        try:
            result = subprocess.run([cmd, '--version'], capture_output=True, text=True, timeout=10)
            if result.returncode == 0:
                npm_version = result.stdout.strip()
                npm_found = True
                print_colored(f"‚úÖ npm –Ω–∞–π–¥–µ–Ω: {npm_version}", Colors.GREEN)
                break
        except:
            continue
    
    if not node_found:
        print_colored("‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", Colors.YELLOW)
    
    if not npm_found:
        print_colored("‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω - –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å Node.js", Colors.YELLOW)
    
    return node_found and npm_found, node_version, npm_version

def download_and_install_nodejs():
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js"""
    print_colored("\nüü¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js...", Colors.YELLOW)
    
    system, arch = detect_system_info()
    
    # URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Node.js LTS
    base_url = "https://nodejs.org/dist/v18.17.1/"
    
    if system == "windows":
        if arch == "x64":
            filename = "node-v18.17.1-x64.msi"
        else:
            filename = "node-v18.17.1-x86.msi"
        installer_type = "msi"
    elif system == "darwin":  # macOS
        filename = f"node-v18.17.1-darwin-{arch}.pkg"
        installer_type = "pkg"
    else:  # Linux
        filename = f"node-v18.17.1-linux-{arch}.tar.xz"
        installer_type = "tar"
    
    download_url = base_url + filename
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
    temp_dir = tempfile.mkdtemp()
    installer_path = os.path.join(temp_dir, filename)
    
    print_colored(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ Node.js –¥–ª—è {system} {arch}...", Colors.CYAN)
    print_colored(f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {download_url}", Colors.WHITE)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫
    if not download_with_progress(download_url, installer_path, "Node.js"):
        print_colored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å Node.js", Colors.RED)
        return False
    
    print_colored(f"üíæ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {os.path.getsize(installer_path) // (1024*1024)} –ú–ë", Colors.WHITE)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Node.js
    try:
        if installer_type == "msi":
            print_colored("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js (MSI)...", Colors.CYAN)
            print_colored("‚ö†Ô∏è –ú–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", Colors.YELLOW)
            
            # –¢–∏—Ö–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ MSI
            result = subprocess.run([
                "msiexec", "/i", installer_path, 
                "/quiet", "/norestart",
                "ADDLOCAL=ALL"
            ], timeout=600)
            
            if result.returncode == 0:
                print_colored("‚úÖ Node.js —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", Colors.GREEN)
            else:
                print_colored(f"‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∫–æ–¥–æ–º {result.returncode}", Colors.YELLOW)
            
        elif installer_type == "pkg":
            print_colored("üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js (PKG)...", Colors.CYAN)
            result = subprocess.run(["sudo", "installer", "-pkg", installer_path, "-target", "/"], timeout=600)
            
        elif installer_type == "tar":
            print_colored("üîß –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ Node.js (TAR)...", Colors.CYAN)
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤ /usr/local –¥–ª—è Linux
            extract_path = "/usr/local"
            if not os.access(extract_path, os.W_OK):
                print_colored("‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ /usr/local", Colors.YELLOW)
                extract_path = os.path.expanduser("~/nodejs")
                os.makedirs(extract_path, exist_ok=True)
            
            # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤
            import tarfile
            with tarfile.open(installer_path, 'r:xz') as tar:
                tar.extractall(extract_path)
            
            print_colored(f"‚úÖ Node.js —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω –≤ {extract_path}", Colors.GREEN)
        
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        try:
            shutil.rmtree(temp_dir)
        except:
            pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        time.sleep(5)
        
        return True
        
    except subprocess.TimeoutExpired:
        print_colored("‚è∞ –¢–∞–π–º–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js", Colors.RED)
        return False
    except Exception as e:
        print_colored(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js: {e}", Colors.RED)
        return False

def verify_nodejs_after_install():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print_colored("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js...", Colors.YELLOW)
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è PATH
    time.sleep(3)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if platform.system() == "Windows":
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—É—Ç–∏ Node.js –≤ PATH
        nodejs_paths = [
            r"C:\Program Files\nodejs",
            r"C:\Program Files (x86)\nodejs",
            os.path.expanduser(r"~\AppData\Roaming\npm")
        ]
        
        current_path = os.environ.get('PATH', '')
        for nodejs_path in nodejs_paths:
            if os.path.exists(nodejs_path) and nodejs_path not in current_path:
                os.environ['PATH'] = nodejs_path + os.pathsep + current_path
                print_colored(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å: {nodejs_path}", Colors.CYAN)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Node.js –µ—â–µ —Ä–∞–∑
    node_found, node_version, npm_version = check_nodejs_installation()
    
    if node_found:
        print_colored("‚úÖ Node.js —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!", Colors.GREEN)
        return True
    else:
        print_colored("‚ùå Node.js –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", Colors.RED)
        print_colored("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:", Colors.YELLOW)
        print_colored("   1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª/–∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É", Colors.WHITE)
        print_colored("   2. –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä", Colors.WHITE)
        print_colored("   3. –î–æ–±–∞–≤—å—Ç–µ Node.js –≤ PATH –≤—Ä—É—á–Ω—É—é", Colors.WHITE)
        return False

def detect_cardinal_path():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ FunPay Cardinal"""
    print_colored("\nüîç –ü–æ–∏—Å–∫ FunPay Cardinal...", Colors.YELLOW)
    
    possible_paths = [
        Path.cwd(),  # –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞
        Path.cwd().parent,  # –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞
        Path.cwd().parent.parent,  # –ü—Ä–∞—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –ø–∞–ø–∫–∞
        Path.cwd() / "FunPayCardinal",
        Path.cwd().parent / "FunPayCardinal",
        Path.home() / "FunPayCardinal",
        Path.home() / "Desktop" / "FunPayCardinal",
        Path.home() / "Downloads" / "FunPayCardinal",
    ]
    
    # –¢–∞–∫–∂–µ –∏—â–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ñ–∞–π–ª–∞–º Cardinal
    for root, dirs, files in os.walk(Path.cwd().parent):
        if "main.py" in files and "plugins" in dirs:
            possible_paths.append(Path(root))
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞
        if Path(root).resolve().parts.__len__() > Path.cwd().resolve().parts.__len__() + 3:
            break
    
    for path in possible_paths:
        try:
            if (path / "main.py").exists() and (path / "plugins").exists():
                print_colored(f"‚úÖ –ù–∞–π–¥–µ–Ω FunPay Cardinal: {path}", Colors.GREEN)
                return path
        except:
            continue
    
    # –†—É—á–Ω–æ–π –≤–≤–æ–¥ –ø—É—Ç–∏
    print_colored("‚ùì FunPay Cardinal –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", Colors.YELLOW)
    print_colored("üìÅ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ FunPay Cardinal", Colors.WHITE)
    
    while True:
        try:
            custom_path = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ FunPay Cardinal: ").strip().strip('"')
            if not custom_path:
                continue
                
            path = Path(custom_path)
            if (path / "main.py").exists() and (path / "plugins").exists():
                print_colored(f"‚úÖ –ü—É—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: {path}", Colors.GREEN)
                return path
            else:
                print_colored("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç main.py –∏ plugins/", Colors.RED)
                print_colored("üí° –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏: C:\\FunPayCardinal", Colors.WHITE)
        except KeyboardInterrupt:
            print_colored("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", Colors.RED)
            sys.exit(1)
        except Exception as e:
            print_colored(f"‚ùå –û—à–∏–±–∫–∞: {e}", Colors.RED)

def create_files(cardinal_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print_colored("\nüìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–ª–∞–≥–∏–Ω–∞...", Colors.YELLOW)
    
    plugins_dir = cardinal_path / "plugins"
    bot_dir = plugins_dir / "minecraft_bot"
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏
    bot_dir.mkdir(exist_ok=True)
    print_colored(f"‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {bot_dir}", Colors.GREEN)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–ª–∞–≥–∏–Ω–∞
    current_dir = Path(__file__).parent
    main_plugin_file = current_dir / "minecraft_currency.py"
    
    if main_plugin_file.exists():
        # –ö–æ–ø–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
        shutil.copy2(main_plugin_file, plugins_dir / "minecraft_currency.py")
        print_colored(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: minecraft_currency.py", Colors.GREEN)
    else:
        print_colored("‚ö†Ô∏è minecraft_currency.py –Ω–µ –Ω–∞–π–¥–µ–Ω - –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª", Colors.YELLOW)
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–π —Ñ–∞–π–ª –ø–ª–∞–≥–∏–Ω–∞
    
    # –°–æ–∑–¥–∞–µ–º simple_bot.js
    create_simple_bot_js(bot_dir)
    print_colored(f"‚úÖ –°–æ–∑–¥–∞–Ω: simple_bot.js", Colors.GREEN)
    
    # –°–æ–∑–¥–∞–µ–º package.json
    create_package_json(bot_dir)
    print_colored(f"‚úÖ –°–æ–∑–¥–∞–Ω: package.json", Colors.GREEN)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
    storage_dir = cardinal_path / "storage"
    cache_dir = storage_dir / "cache"
    logs_dir = storage_dir / "logs"
    
    cache_dir.mkdir(parents=True, exist_ok=True)
    logs_dir.mkdir(parents=True, exist_ok=True)
    
    print_colored(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –ø–∞–ø–∫–∏ –¥–∞–Ω–Ω—ã—Ö", Colors.GREEN)
    
    return bot_dir

def create_simple_bot_js(bot_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ simple_bot.js"""
    simple_bot_content = '''const mineflayer = require('mineflayer');

class SimpleFuntimeBot {
    constructor() {
        this.bot = null;
        this.isConnected = false;
        this.config = {
            username: 'Tabbydoodle',
            password: 'pee228',
            anarchy: 'an210',
            host: 'funtime.su',
            port: 25565,
            version: '1.19.4'
        };
    }

    async connect() {
        if (this.isConnected) {
            return true;
        }

        try {
            this.bot = mineflayer.createBot({
                host: this.config.host,
                port: this.config.port,
                username: this.config.username,
                password: this.config.password,
                version: this.config.version,
                auth: 'offline'
            });

            this.setupEventHandlers();

            return new Promise((resolve, reject) => {
                const timeout = setTimeout(() => {
                    reject(new Error('Connection timeout'));
                }, 30000);

                this.bot.once('spawn', () => {
                    clearTimeout(timeout);
                    this.isConnected = true;
                    resolve(true);
                });

                this.bot.once('error', (err) => {
                    clearTimeout(timeout);
                    reject(err);
                });
            });
        } catch (error) {
            return false;
        }
    }

    setupEventHandlers() {
        this.bot.on('spawn', () => {
            // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–∞ –∞–Ω–∞—Ä—Ö–∏–∏
            setTimeout(() => {
                this.bot.chat(`/login ${this.config.anarchy}`);
            }, 2000);
            
            // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ 210 –∞–Ω–∞—Ä—Ö–∏—é
            setTimeout(() => {
                this.bot.chat('/an210');
            }, 4000);
        });

        this.bot.on('error', (err) => {
            this.isConnected = false;
        });

        this.bot.on('end', () => {
            this.isConnected = false;
        });

        this.bot.on('kicked', (reason) => {
            this.isConnected = false;
        });
    }

    async giveMoney(playerName, amount) {
        if (!this.isConnected) {
            throw new Error('Bot not connected');
        }

        try {
            // –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            await this.delay(3000);
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞–Ω–∞—Ä—Ö–∏—é
            this.bot.chat('/an210');
            await this.delay(3000);

            // –ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ (–¥–≤—É–∫—Ä–∞—Ç–Ω—ã–π –≤–≤–æ–¥ –¥–ª—è FunTime)
            const command = `/pay ${playerName} ${amount}`;
            
            this.bot.chat(command);
            await this.delay(2000);
            this.bot.chat(command);
            await this.delay(3000);
            
            return true;
            
        } catch (error) {
            throw error;
        }
    }

    async disconnect() {
        if (this.bot && this.isConnected) {
            this.bot.quit();
            this.isConnected = false;
            await this.delay(1000);
        }
    }

    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–µ–Ω–µ–≥
async function payPlayer(playerName, amount) {
    const bot = new SimpleFuntimeBot();
    
    try {
        await bot.connect();
        await bot.giveMoney(playerName, amount);
        
        console.log(JSON.stringify({
            success: true,
            player: playerName,
            amount: amount,
            message: `Successfully transferred ${amount.toLocaleString()} coins to ${playerName}`
        }));
        
        return true;
        
    } catch (error) {
        console.log(JSON.stringify({
            success: false,
            error: error.name || 'unknown_error',
            message: error.message
        }));
        
        return false;
        
    } finally {
        await bot.disconnect();
    }
}

// –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testConnection() {
    const bot = new SimpleFuntimeBot();
    
    try {
        await bot.connect();
        
        console.log(JSON.stringify({
            success: true,
            isConnected: bot.isConnected,
            message: 'Bot connection test successful'
        }));
        
        return true;
        
    } catch (error) {
        console.log(JSON.stringify({
            success: false,
            isConnected: false,
            error: error.name || 'connection_error',
            message: error.message
        }));
        
        return false;
        
    } finally {
        await bot.disconnect();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
module.exports = { SimpleFuntimeBot, payPlayer, testConnection };

// –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const args = process.argv.slice(2);
    
    if (args.length === 0) {
        console.log(JSON.stringify({
            success: false,
            error: 'no_command',
            message: 'Usage: node simple_bot.js <player> <amount> or node simple_bot.js test'
        }));
        process.exit(1);
    }
    
    // –ö–æ–º–∞–Ω–¥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if (args[0].toLowerCase() === 'test') {
        testConnection().then(success => {
            process.exit(success ? 0 : 1);
        });
        return;
    }
    
    // –ö–æ–º–∞–Ω–¥–∞ –≤—ã–¥–∞—á–∏ –¥–µ–Ω–µ–≥
    if (args.length < 2) {
        console.log(JSON.stringify({
            success: false,
            error: 'invalid_args',
            message: 'Usage: node simple_bot.js <player> <amount>'
        }));
        process.exit(1);
    }
    
    const playerName = args[0];
    const amount = parseInt(args[1]);
    
    if (isNaN(amount) || amount <= 0) {
        console.log(JSON.stringify({
            success: false,
            error: 'invalid_amount',
            message: 'Invalid amount'
        }));
        process.exit(1);
    }
    
    payPlayer(playerName, amount).then(success => {
        process.exit(success ? 0 : 1);
    });
}'''
    
    with open(bot_dir / "simple_bot.js", 'w', encoding='utf-8') as f:
        f.write(simple_bot_content)

def create_package_json(bot_dir):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ package.json"""
    package_content = {
        "name": "funtime-currency-bot",
        "version": "1.0.0",
        "description": "Minecraft bot –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≤—ã–¥–∞—á–∏ –≤–∞–ª—é—Ç—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Funtime",
        "main": "simple_bot.js",
        "scripts": {
            "start": "node simple_bot.js",
            "test": "node simple_bot.js test",
            "pay": "node simple_bot.js"
        },
        "dependencies": {
            "mineflayer": "^4.17.0",
            "prismarine-chat": "^1.10.0"
        },
        "keywords": ["minecraft", "mineflayer", "funtime", "currency"],
        "author": "FunPayCardinal Plugin",
        "license": "MIT"
    }
    
    with open(bot_dir / "package.json", 'w', encoding='utf-8') as f:
        json.dump(package_content, f, indent=2, ensure_ascii=False)

def install_node_dependencies(bot_dir):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js"""
    print_colored("\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js...", Colors.YELLOW)
    
    # –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ npm –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏
    npm_commands = ['npm', 'npm.cmd']
    
    success = False
    
    for npm_cmd in npm_commands:
        try:
            print_colored(f"üîß –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–µ—Ä–µ–∑ {npm_cmd}...", Colors.CYAN)
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
            result = subprocess.run([npm_cmd, 'install'], 
                                  cwd=bot_dir, 
                                  capture_output=True, 
                                  text=True, 
                                  timeout=600)  # 10 –º–∏–Ω—É—Ç
            
            if result.returncode == 0:
                print_colored("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!", Colors.GREEN)
                success = True
                break
            else:
                print_colored(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å {npm_cmd}: {result.stderr[:200]}", Colors.YELLOW)
                continue
                
        except subprocess.TimeoutExpired:
            print_colored(f"‚è∞ –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —á–µ—Ä–µ–∑ {npm_cmd}", Colors.YELLOW)
            continue
        except FileNotFoundError:
            print_colored(f"‚ùå {npm_cmd} –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.YELLOW)
            continue
        except Exception as e:
            print_colored(f"‚ùå –û—à–∏–±–∫–∞ —Å {npm_cmd}: {e}", Colors.YELLOW)
            continue
    
    if not success:
        print_colored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ npm", Colors.RED)
        print_colored("üîß –ü–æ–ø—ã—Ç–∫–∞ —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏...", Colors.YELLOW)
        
        # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        try:
            node_modules_dir = bot_dir / "node_modules"
            node_modules_dir.mkdir(exist_ok=True)
            
            print_colored("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω–∞ –±–∞–∑–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞", Colors.YELLOW)
            print_colored("üìã –¢–†–ï–ë–£–ï–¢–°–Ø: –í—ã–ø–æ–ª–Ω–∏—Ç–µ 'npm install' –≤ –ø–∞–ø–∫–µ minecraft_bot –≤—Ä—É—á–Ω—É—é!", Colors.RED)
        except Exception as e:
            print_colored(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {e}", Colors.RED)
            return False
    
    return success

def test_installation(bot_dir):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print_colored("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...", Colors.YELLOW)
    
    success_count = 0
    total_tests = 4
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    print_colored("üîç –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤...", Colors.CYAN)
    files_to_check = [
        bot_dir / "simple_bot.js",
        bot_dir / "package.json"
    ]
    
    files_ok = True
    for file_path in files_to_check:
        if file_path.exists():
            print_colored(f"   ‚úÖ {file_path.name}", Colors.GREEN)
        else:
            print_colored(f"   ‚ùå {file_path.name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", Colors.RED)
            files_ok = False
    
    if files_ok:
        success_count += 1
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js
    print_colored("üîç –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ Node.js...", Colors.CYAN)
    node_ok, node_version, npm_version = check_nodejs_installation()
    if node_ok:
        print_colored(f"   ‚úÖ Node.js —Ä–∞–±–æ—Ç–∞–µ—Ç: {node_version}", Colors.GREEN)
        success_count += 1
    else:
        print_colored("   ‚ùå Node.js –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç", Colors.RED)
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    print_colored("üîç –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ node_modules...", Colors.CYAN)
    node_modules_dir = bot_dir / "node_modules"
    if node_modules_dir.exists():
        mineflayer_dir = node_modules_dir / "mineflayer"
        if mineflayer_dir.exists():
            print_colored("   ‚úÖ Mineflayer —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", Colors.GREEN)
            success_count += 1
        else:
            print_colored("   ‚ö†Ô∏è Mineflayer –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.YELLOW)
    else:
        print_colored("   ‚ùå node_modules –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ JavaScript
    print_colored("üîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –±–æ—Ç–∞...", Colors.CYAN)
    try:
        result = subprocess.run(['node', '--check', 'simple_bot.js'], 
                              cwd=bot_dir, capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print_colored("   ‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å JavaScript –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω", Colors.GREEN)
            success_count += 1
        else:
            print_colored(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞: {result.stderr}", Colors.RED)
            
    except Exception as e:
        print_colored(f"   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å: {e}", Colors.YELLOW)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print_colored(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {success_count}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ", Colors.CYAN)
    
    if success_count >= 3:
        print_colored("‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —É—Å–ø–µ—à–Ω–∞!", Colors.GREEN)
        return True
    elif success_count >= 2:
        print_colored("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞", Colors.YELLOW)
        return True
    else:
        print_colored("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–∞ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", Colors.RED)
        return False

def create_setup_instructions(cardinal_path):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π"""
    instructions_path = cardinal_path / "plugins" / "MINECRAFT_CURRENCY_COMPLETE_SETUP.txt"
    
    node_ok, node_version, npm_version = check_nodejs_installation()
    
    instructions = f"""
üéÆ MINECRAFT CURRENCY PLUGIN - –ü–û–õ–ù–ê–Ø –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ù–ê–°–¢–†–û–ô–ö–ï

‚úÖ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!

üìÅ –£–°–¢–ê–ù–û–í–õ–ï–ù–ù–´–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´:
‚îú‚îÄ‚îÄ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (aiofiles, asyncio, requests)
‚îú‚îÄ‚îÄ Node.js {node_version if node_ok else '—Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏'}
‚îú‚îÄ‚îÄ npm {npm_version if node_ok else '—Ç—Ä–µ–±—É–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏'}
‚îú‚îÄ‚îÄ plugins/minecraft_currency.py        # –û—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–≥–∏–Ω
‚îî‚îÄ‚îÄ plugins/minecraft_bot/
    ‚îú‚îÄ‚îÄ simple_bot.js                   # Minecraft –±–æ—Ç
    ‚îú‚îÄ‚îÄ package.json                    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    ‚îî‚îÄ‚îÄ node_modules/                   # npm –ø–∞–∫–µ—Ç—ã

üîß –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–ê–Ø –ù–ê–°–¢–†–û–ô–ö–ê:

1. –ó–ê–ü–£–°–¢–ò–¢–ï FUNPAY CARDINAL:
   python main.py

2. –û–¢–ö–†–û–ô–¢–ï TELEGRAM –ò –í–´–ü–û–õ–ù–ò–¢–ï:
   /mc_settings

3. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ù–ê–°–¢–†–û–ô–¢–ï –ë–û–¢–ê:
   ‚Ä¢ ü§ñ –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê
   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –Ω–∞ –≤–∞—à Minecraft –∞–∫–∫–∞—É–Ω—Ç
   ‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞
   ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤–∞—à Telegram chat_id

4. –ü–†–û–í–ï–†–¨–¢–ï –†–ê–ë–û–¢–£ –ë–û–¢–ê:
   /mc_test_bot                    # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   /mc_test_pay                    # –¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ 1000 –º–æ–Ω–µ—Ç

5. –ó–ê–ü–£–°–¢–ò–¢–ï –ü–õ–ê–ì–ò–ù:
   /mc_start                       # –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞

üìã –ö–û–ú–ê–ù–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø:
‚Ä¢ /mc_start      - –ó–∞–ø—É—Å–∫ –ø–ª–∞–≥–∏–Ω–∞
‚Ä¢ /mc_stop       - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–≥–∏–Ω–∞
‚Ä¢ /mc_settings   - –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫
‚Ä¢ /mc_pending    - –û–∂–∏–¥–∞—é—â–∏–µ –∑–∞–∫–∞–∑—ã
‚Ä¢ /mc_test_bot   - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
‚Ä¢ /mc_test_pay   - –¢–µ—Å—Ç –≤—ã–¥–∞—á–∏ –≤–∞–ª—é—Ç—ã
‚Ä¢ /mc_toggle_auto - –í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–≤—ã–¥–∞—á—É

‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ:
‚Ä¢ –°–µ—Ä–≤–µ—Ä: funtime.su (–∞–Ω–∞—Ä—Ö–∏—è 210)
‚Ä¢ 1 —Ç–æ–≤–∞—Ä = 1,000,000 –º–æ–Ω–µ—Ç
‚Ä¢ –ê–≤—Ç–æ–≤—ã–¥–∞—á–∞: –û–¢–ö–õ–Æ–ß–ï–ù–ê (–Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –≤ /mc_settings)
‚Ä¢ –¢–µ—Å—Ç–æ–≤—ã–π –∏–≥—Ä–æ–∫: TestUser

üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:

1. –°–ú–ï–ù–ò–¢–ï –î–ê–ù–ù–´–ï –ë–û–¢–ê:
   ‚ùå –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞
   ‚úÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –í–ê–®–ï–ì–û Minecraft –∞–∫–∫–∞—É–Ω—Ç–∞

2. –ù–ê–°–¢–†–û–ô–¢–ï CHAT_ID:
   ‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ –≤–∞—à chat_id –æ—Ç @userinfobot
   ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –µ–≥–æ –≤ notification_chat_id

3. –ü–†–û–í–ï–†–¨–¢–ï –î–ï–ù–¨–ì–ò –ù–ê –ë–û–¢–ï:
   ‚Ä¢ –£ –±–æ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–º–µ—Ç—å –º–∏–Ω–∏–º—É–º 10,000,000 –º–æ–Ω–µ—Ç

üí° –õ–û–ì–ò–ö–ê –†–ê–ë–û–¢–´:
1. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç –õ–Æ–ë–û–ô —Ç–æ–≤–∞—Ä –Ω–∞ FunPay
2. –ü–ª–∞–≥–∏–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤ Minecraft –≤–∞–ª—é—Ç—É
3. –ü–æ–∫—É–ø–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–π –∏–≥—Ä–æ–≤–æ–π –Ω–∏–∫–Ω–µ–π–º
4. –ë–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤–∞–ª—é—Ç—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

üîß –£–°–¢–†–ê–ù–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú:

‚ùå "npm –Ω–µ –Ω–∞–π–¥–µ–Ω":
   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω–∞–ª
   ‚Ä¢ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–º–ø—å—é—Ç–µ—Ä
   ‚Ä¢ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js

‚ùå "–ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è":
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏ –ø–∞—Ä–æ–ª—å –±–æ—Ç–∞
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

‚ùå "–ö–æ–º–∞–Ω–¥—ã –Ω–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è":
   ‚Ä¢ –£ –±–æ—Ç–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω (/login password)
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –±–æ—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∞–Ω–∞—Ä—Ö–∏–∏ (/an210)

‚ùå "Python –æ—à–∏–±–∫–∏":
   ‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Python 3.7+
   ‚Ä¢ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install aiofiles asyncio

üìû –ü–û–î–î–ï–†–ñ–ö–ê:
‚Ä¢ Telegram: @ilpajj
‚Ä¢ –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –ª–æ–≥–∏ –∏–∑ –ø–∞–ø–∫–∏ storage/logs/

üéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –†–ê–ë–û–¢–ï:
‚òê Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
‚òê npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
‚òê –ù–∏–∫–Ω–µ–π–º –∏ –ø–∞—Ä–æ–ª—å –±–æ—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–∞ –≤–∞—à–∏
‚òê Chat_id –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
‚òê –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (/mc_test_bot) —É—Å–ø–µ—à–µ–Ω
‚òê –¢–µ—Å—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ (/mc_test_pay) —É—Å–ø–µ—à–µ–Ω
‚òê –ü–ª–∞–≥–∏–Ω –∑–∞–ø—É—â–µ–Ω (/mc_start)

–î–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {time.strftime('%Y-%m-%d %H:%M:%S')}
–°–∏—Å—Ç–µ–º–∞: {platform.system()} {platform.release()}
Python: {sys.version.split()[0]}
Node.js: {node_version if node_ok else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}
"""
    
    with open(instructions_path, 'w', encoding='utf-8') as f:
        f.write(instructions)
    
    return instructions_path

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–∞"""
    print_header()
    
    try:
        # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
        print_colored("\nüîç –≠–¢–ê–ü 1: –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´", Colors.BOLD + Colors.CYAN)
        
        if not check_python_version():
            print_colored("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–π –≤–µ—Ä—Å–∏–∏ Python", Colors.RED)
            return
        
        if not check_internet_connection():
            print_colored("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞", Colors.RED)
            return
        
        # –®–∞–≥ 2: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
        print_colored("\nüì¶ –≠–¢–ê–ü 2: PYTHON –ó–ê–í–ò–°–ò–ú–û–°–¢–ò", Colors.BOLD + Colors.CYAN)
        install_python_packages()
        
        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Node.js
        print_colored("\nüü¢ –≠–¢–ê–ü 3: NODE.JS", Colors.BOLD + Colors.CYAN)
        node_installed, node_version, npm_version = check_nodejs_installation()
        
        if not node_installed:
            print_colored("üîß Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω - –Ω–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É...", Colors.YELLOW)
            
            if download_and_install_nodejs():
                if verify_nodejs_after_install():
                    print_colored("‚úÖ Node.js —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", Colors.GREEN)
                else:
                    print_colored("‚ö†Ô∏è Node.js —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞", Colors.YELLOW)
            else:
                print_colored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Node.js –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", Colors.RED)
                print_colored("üìã –°–∫–∞—á–∞–π—Ç–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js –≤—Ä—É—á–Ω—É—é —Å https://nodejs.org/", Colors.YELLOW)
                
                input("–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Node.js –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                node_installed, node_version, npm_version = check_nodejs_installation()
                if not node_installed:
                    print_colored("‚ùå Node.js –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω", Colors.RED)
                    return
        
        # –®–∞–≥ 4: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ FunPay Cardinal
        print_colored("\nüìÅ –≠–¢–ê–ü 4: –ü–û–ò–°–ö FUNPAY CARDINAL", Colors.BOLD + Colors.CYAN)
        cardinal_path = detect_cardinal_path()
        if not cardinal_path:
            print_colored("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ FunPay Cardinal", Colors.RED)
            return
        
        # –®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
        print_colored("\nüìÑ –≠–¢–ê–ü 5: –°–û–ó–î–ê–ù–ò–ï –§–ê–ô–õ–û–í", Colors.BOLD + Colors.CYAN)
        bot_dir = create_files(cardinal_path)
        
        # –®–∞–≥ 6: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Node.js
        print_colored("\nüì¶ –≠–¢–ê–ü 6: –ó–ê–í–ò–°–ò–ú–û–°–¢–ò NODE.JS", Colors.BOLD + Colors.CYAN)
        npm_success = install_node_dependencies(bot_dir)
        
        # –®–∞–≥ 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print_colored("\nüß™ –≠–¢–ê–ü 7: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï", Colors.BOLD + Colors.CYAN)
        test_success = test_installation(bot_dir)
        
        # –®–∞–≥ 8: –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
        print_colored("\nüìã –≠–¢–ê–ü 8: –§–ò–ù–ê–õ–ò–ó–ê–¶–ò–Ø", Colors.BOLD + Colors.CYAN)
        instructions_path = create_setup_instructions(cardinal_path)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
        print_colored("\n" + "=" * 70, Colors.CYAN)
        print_colored("üéâ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!", Colors.BOLD + Colors.GREEN)
        print_colored("=" * 70, Colors.CYAN)
        
        print_colored(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–°–¢–ê–ù–û–í–ö–ò:", Colors.BOLD + Colors.WHITE)
        print_colored(f"   ‚Ä¢ Python –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: ‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", Colors.GREEN)
        print_colored(f"   ‚Ä¢ Node.js: {'‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç' if node_installed else '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'}", 
                     Colors.GREEN if node_installed else Colors.YELLOW)
        print_colored(f"   ‚Ä¢ npm –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {'‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã' if npm_success else '‚ö†Ô∏è –¢—Ä–µ–±—É—é—Ç —Ä—É—á–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏'}", 
                     Colors.GREEN if npm_success else Colors.YELLOW)
        print_colored(f"   ‚Ä¢ –ü–ª–∞–≥–∏–Ω: ‚úÖ –°–æ–∑–¥–∞–Ω", Colors.GREEN)
        print_colored(f"   ‚Ä¢ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if test_success else '‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ'}", 
                     Colors.GREEN if test_success else Colors.YELLOW)
        
        print_colored(f"\nüìÅ –ü–ª–∞–≥–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤: {cardinal_path / 'plugins'}", Colors.WHITE)
        print_colored(f"üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {instructions_path.name}", Colors.WHITE)
        
        print_colored(f"\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:", Colors.BOLD + Colors.YELLOW)
        print_colored(f"   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Cardinal: python main.py", Colors.WHITE)
        print_colored(f"   2. –í Telegram: /mc_settings", Colors.WHITE)
        print_colored(f"   3. üö® –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–º–µ–Ω–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –∏ –ø–∞—Ä–æ–ª—å –±–æ—Ç–∞!", Colors.RED)
        print_colored(f"   4. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ chat_id –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", Colors.WHITE)
        print_colored(f"   5. –¢–µ—Å—Ç: /mc_test_bot", Colors.WHITE)
        print_colored(f"   6. –ó–∞–ø—É—Å–∫: /mc_start", Colors.WHITE)
        
        if not npm_success:
            print_colored(f"\n‚ö†Ô∏è –¢–†–ï–ë–£–ï–¢–°–Ø –†–£–ß–ù–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê:", Colors.BOLD + Colors.YELLOW)
            print_colored(f"   cd {bot_dir}", Colors.WHITE)
            print_colored(f"   npm install", Colors.WHITE)
        
        print_colored(f"\nüí° –í–ê–ñ–ù–û: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –î–û–õ–ñ–ù–´ –±—ã—Ç—å –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –≤–∞—à–∏!", Colors.RED + Colors.BOLD)
        print_colored(f"üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @ilpajj", Colors.CYAN)
        
    except KeyboardInterrupt:
        print_colored("\n‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", Colors.RED)
    except Exception as e:
        print_colored(f"\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}", Colors.RED + Colors.BOLD)
        print_colored("üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @ilpajj", Colors.CYAN)
        import traceback
        print_colored(f"üîç –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: {traceback.format_exc()}", Colors.WHITE)

if __name__ == "__main__":
    main()
    
    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
    try:
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
    except:
        pass
